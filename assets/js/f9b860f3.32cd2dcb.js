"use strict";(self.webpackChunkr_14_documentation=self.webpackChunkr_14_documentation||[]).push([[294],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),g=u(n),p=i,m=g["".concat(l,".").concat(p)]||g[p]||c[p]||a;return n?r.createElement(m,s(s({ref:t},d),{},{components:n})):r.createElement(m,s({ref:t},d))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var u=2;u<a;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:4,title:"Drug Testing",description:"Drug Testing and qb-smallresources"},s=void 0,o={unversionedId:"r14-evidence/Setting Up Subsystems/drugtesting",id:"r14-evidence/Setting Up Subsystems/drugtesting",title:"Drug Testing",description:"Drug Testing and qb-smallresources",source:"@site/docs/r14-evidence/Setting Up Subsystems/drugtesting.md",sourceDirName:"r14-evidence/Setting Up Subsystems",slug:"/r14-evidence/Setting Up Subsystems/drugtesting",permalink:"/r14-evidence/Setting Up Subsystems/drugtesting",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/r14-evidence/Setting Up Subsystems/drugtesting.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Drug Testing",description:"Drug Testing and qb-smallresources"},sidebar:"tutorialSidebar",previous:{title:"Vehicle Tampers/Fingerprints",permalink:"/r14-evidence/Setting Up Subsystems/vehicletampers"},next:{title:"Lock Tamperings",permalink:"/r14-evidence/Setting Up Subsystems/locktamperings"}},l={},u=[{value:"Out of the Box",id:"out-of-the-box",level:2}],d={toc:u};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The drug testing functionality in r14-evidence is still new, future config options for integrating custom scripts is coming, along with preconfigured comptability\nwith other consumable scripts!")),(0,i.kt)("h1",{id:"setting-up-the-drug-testing-system"},"Setting Up The Drug Testing System"),(0,i.kt)("h2",{id:"out-of-the-box"},"Out of the Box"),(0,i.kt)("p",null,"By default, r14-evidence is designed to integrate with qb-smallresources for drug testing without any further\nconfiguration or modification to the script. This is handled by the use of server-side event handlers used by\nthe drugs included in qb-smallresource, and existing client-side event hanlder ",(0,i.kt)("inlineCode",{parentName:"p"},"'evidence:client:SetStatus'"),"\nfor the ",(0,i.kt)("inlineCode",{parentName:"p"},"'weedsmell'")," status. As of right now, there is no simple way to add these triggers automatically\nvia the config, but they can be added easily to the script in the meantime if you have some basic experience\nwith lua."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='r14-evidence Drug Config' showLineNumbers",title:"'r14-evidence",Drug:!0,"Config'":!0,showLineNumbers:!0},"Config.DrugTesting = {\n    Enabled = true,\n    UsingQBSR = true, -- set to true if you are using basic qb-smallresources, if not you will need to add an event trigger to your consumables\n    DefaultPositiveTime = 2, -- number, in hours, that a player remains positive for a drug test (does not extend past script reset)\n    Drugs = {\n        ['weed'] = {\n            label = 'Marijuana'\n        },\n        ['oxycodone'] = {\n            label = 'Oxycodone',\n        },\n        ['ecstacy'] = {\n            label = \"Ecstacy\",\n        },\n        ['cocaine'] = {\n            label = 'Cocaine',\n        },\n    }\n}\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Never make changes to ",(0,i.kt)("strong",{parentName:"p"},"ANY")," script without making a backup first, you never know what might happen!")),(0,i.kt)("h1",{id:"integrating-a-third-party-script"},"Integrating A Third Party Script"),(0,i.kt)("p",null,"If you have added additional drugs in qb-smallresources, or perhaps use an entirely different script for drug\nitems, you can add support for drug testing in r14-evidence simply by adding a server event trigger at some point\nin your drug item code. To better understand how to add these events, we can take a look at the code used to integrate\nr14-evidence with qb-smallresources. We'll start with the client-side event handler that is triggered when a player\nsmokes weed in order to apply a status effect."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Client-side Network Event Handler" showLineNumbers',title:'"Client-side',Network:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},"RegisterNetEvent('evidence:client:SetStatus', function(statusId, time, abv)\n    if Config.Breathalyzer and (statusId == 'alcohol' or statusId == 'heavyalcohol') then\n        TriggerServerEvent('evidence:server:IncreaseBAC', abv or 15) -- increases BAC by .015 or by abv if a third argument is supplied\n    end\n\n    //highlight-start\n    if Config.DrugTesting.Enabled and Config.DrugTesting.UsingQBSR and statusId == 'weedsmell' then\n        TriggerServerEvent('evidence:server:SetDrugStatus', {drug = 'weed'})\n    end\n    //highlight-end\n\n    if time > 0 and Config.StatusList[statusId] then\n        if (CurrentStatusList == nil or CurrentStatusList[statusId] == nil) or (CurrentStatusList[statusId] and CurrentStatusList[statusId].time < 20) then\n            CurrentStatusList[statusId] = {\n                text = Config.StatusList[statusId],\n                time = time\n            }\n            Config.Functions.Notify(''..CurrentStatusList[statusId].text..'')\n        end\n    elseif Config.StatusList[statusId] then\n        CurrentStatusList[statusId] = nil\n    end\n    TriggerServerEvent('evidence:server:UpdateStatus', CurrentStatusList)\nend)\n")),(0,i.kt)("p",null,"Similiar to the breathalzyer integration, our client-side event handler is triggered when a player completes the progress bar after using a joint\nitem, meaning that is an effective time to set the drug usage in r14-evidence. By simply adding a conditional statement here, we check if the status\neffect is 'weedsmell' and then trigger the ",(0,i.kt)("inlineCode",{parentName:"p"},"'evidence:server:SetDrugStatus'")," event. We create table containing the ",(0,i.kt)("inlineCode",{parentName:"p"},"drug")," subfield which equals the\nname of the drug from our config, in this case ",(0,i.kt)("inlineCode",{parentName:"p"},"'weed'")," and that is it! There are a few ways we can trigger this event as seen below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Triggering the Drug Status Network Event"',title:'"Triggering',the:!0,Drug:!0,Status:!0,Network:!0,'Event"':!0},"TriggerServerEvent('evidence:server:SetDrugStatus', {drug = 'cocaine'})\n\nTriggerEvent('evidence:server:SetDrugStatus', {cid= GetPlayerData(source).citizenid, drug = 'weed'})\n\n")),(0,i.kt)("p",null,"Here we can see the first trigger is the same as in our above example, we simply supply a table with the drug name that we want the player to test positive\nfor and then the server-side event handler will automatically grab the player's citizen ID. If we want to trigger this from the server, we can also do so by\nadding a ",(0,i.kt)("inlineCode",{parentName:"p"},"cid'")," field to our argument data table. As an example of how to use these events in a script, lets look at qb-small resources and check how it\nhandles the oxy item!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='qb-smallresources Server-side CreateUseableItem()' showLineNumbers",title:"'qb-smallresources","Server-side":!0,"CreateUseableItem()'":!0,showLineNumbers:!0},'QBCore.Functions.CreateUseableItem("oxy", function(source)\n    TriggerClientEvent("consumables:client:oxy", source)\nend)\n')),(0,i.kt)("p",null,"In this function, we can see that when the ",(0,i.kt)("inlineCode",{parentName:"p"},"oxy")," item is used that it triggers a client event. This would not be an appropriate place to add our drug test\nstatus event trigger as it would automatically set a player as positive even if they canceled using it! Instead, lets follow this code to the client-side and see\nif there is a better place to put it!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="qb-smallresources Client-side Networked Event Handler" showLineNumbers',title:'"qb-smallresources',"Client-side":!0,Networked:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},'RegisterNetEvent(\'consumables:client:oxy\', function()\n    QBCore.Functions.Progressbar("use_oxy", "Healing", 2000, false, true, {\n        disableMovement = false,\n        disableCarMovement = false,\n        disableMouse = false,\n        disableCombat = true,\n    }, {\n        animDict = "mp_suicide",\n        anim = "pill",\n        flags = 49,\n    // highlight-start\n    }, {}, {}, function() -- Done\n        StopAnimTask(PlayerPedId(), "mp_suicide", "pill", 1.0)\n        TriggerServerEvent("consumables:server:useOxy")\n        TriggerEvent("inventory:client:ItemBox", QBCore.Shared.Items["oxy"], "remove")\n        ClearPedBloodDamage(PlayerPedId())\n        HealOxy()\n    // highlight-end\n    end, function() -- Cancel\n        StopAnimTask(PlayerPedId(), "mp_suicide", "pill", 1.0)\n        QBCore.Functions.Notify("Canceled", "error")\n    end)\nend)\n')),(0,i.kt)("p",null,"In this client-side code, we can see that using the ",(0,i.kt)("inlineCode",{parentName:"p"},"'oxy'")," item starts a progress bar which the player can cancel, or allow to complete\nin order to use the drug. In this part of the progress bar completion function would be a perfect place to trigger our server event. Let's go\nand place the TriggerServerEvent() function we need to trigger r14-evidence to set a player positive for the ",(0,i.kt)("inlineCode",{parentName:"p"},"'oxycodone'")," drug in our config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Modified qb-smallresources Client-side Networked Event Handler" showLineNumbers',title:'"Modified',"qb-smallresources":!0,"Client-side":!0,Networked:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},'RegisterNetEvent(\'consumables:client:oxy\', function()\n    QBCore.Functions.Progressbar("use_oxy", "Healing", 2000, false, true, {\n        disableMovement = false,\n        disableCarMovement = false,\n        disableMouse = false,\n        disableCombat = true,\n    }, {\n        animDict = "mp_suicide",\n        anim = "pill",\n        flags = 49,\n    }, {}, {}, function() -- Done\n        StopAnimTask(PlayerPedId(), "mp_suicide", "pill", 1.0)\n        // highlight-next-line\n        TriggerServerEvent(\'evidence:server:SetDrugStatus\', {drug = \'oxycodone\'})\n        TriggerServerEvent("consumables:server:useOxy")\n        TriggerEvent("inventory:client:ItemBox", QBCore.Shared.Items["oxy"], "remove")\n        ClearPedBloodDamage(PlayerPedId())\n        HealOxy()\n    end, function() -- Cancel\n        StopAnimTask(PlayerPedId(), "mp_suicide", "pill", 1.0)\n        QBCore.Functions.Notify("Canceled", "error")\n    end)\nend)\n')),(0,i.kt)("p",null,"Here we can see that we have added our event trigger, and now when a player uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"'oxy'")," item, r14-evidence will receive this information\nand automatically set the player's character as positive for the ",(0,i.kt)("inlineCode",{parentName:"p"},"'oxycodone'")," drug listed in our drug config. While this is a perfectly\nacceptable place to put this event, if this was a different script, where this effect was handled entirely on the server, we may want to find a\nplace on the server-side code to place our event trigger. Let's follow this code to the server and see if there is an acceptable place for it!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='qb-smallresources Server-side Networked Event Handler'",title:"'qb-smallresources","Server-side":!0,Networked:!0,Event:!0,"Handler'":!0},"RegisterNetEvent('consumables:server:useOxy', function()\n    local Player = QBCore.Functions.GetPlayer(source)\n\n    if not Player then return end\n\n    Player.Functions.RemoveItem('oxy', 1)\nend)\n")),(0,i.kt)("p",null,"In this event handler, we can see that the client triggers this server event to remove the used item from the player inventory. Since this is\nonly triggered upon successful use of the ",(0,i.kt)("inlineCode",{parentName:"p"},"'oxy'")," item this is a perfect place to put our event trigger for r14-evidence. However, this time,\nsince we are triggering a server event from the server, we must specify the citizen ID of the player's character as well since the script does\nnot have a source to use to find it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='Modified qb-smallresources Server-side Networked Event Handler'",title:"'Modified","qb-smallresources":!0,"Server-side":!0,Networked:!0,Event:!0,"Handler'":!0},"RegisterNetEvent('consumables:server:useOxy', function()\n    local Player = QBCore.Functions.GetPlayer(source)\n\n    if not Player then return end\n\n    // highlight-next-line\n    TriggerEvent('evidence:server:SetDrugStatus', {cid= Player.PlayerData.citizenid, drug = 'oxycodone'})\n\n    Player.Functions.RemoveItem('oxy', 1)\nend)\n")),(0,i.kt)("p",null,"We can see that the script already runs ",(0,i.kt)("inlineCode",{parentName:"p"},"QBCore.Functions.GetPlayer()")," and stores the player's information in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Player")," variable. It checks\nto make sure that it actually found a player as well, and we can place our event trigger below this so it is only triggered if ",(0,i.kt)("inlineCode",{parentName:"p"},"Player")," has a value\npreventing a potential error where we attempt to index a nil value. We then specify our drug as ",(0,i.kt)("inlineCode",{parentName:"p"},"'oxycodone'")," to match our config, and that is it!\nYou can use this same logic to modify any script yout have access to the code for, but if your consumables or drug script is escrowed, you need to reach\nout to the dev responsible for it!"))}c.isMDXComponent=!0}}]);