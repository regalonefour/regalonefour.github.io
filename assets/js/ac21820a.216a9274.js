"use strict";(self.webpackChunkr_14_documentation=self.webpackChunkr_14_documentation||[]).push([[616],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=u(n),p=i,h=c["".concat(l,".").concat(p)]||c[p]||g[p]||s;return n?r.createElement(h,a(a({ref:t},d),{},{components:n})):r.createElement(h,a({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:i,a[1]=o;for(var u=2;u<s;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1415:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const s={sidebar_position:4,title:"Drug Testing",description:"Drug Testing and qb-smallresources"},a="Setting Up The Drug Testing System",o={unversionedId:"r14-evidence/Installation Process/Setting Up Subsystems/drugtesting",id:"r14-evidence/Installation Process/Setting Up Subsystems/drugtesting",title:"Drug Testing",description:"Drug Testing and qb-smallresources",source:"@site/docs/r14-evidence/Installation Process/Setting Up Subsystems/drugtesting.md",sourceDirName:"r14-evidence/Installation Process/Setting Up Subsystems",slug:"/r14-evidence/Installation Process/Setting Up Subsystems/drugtesting",permalink:"/r14-evidence/Installation Process/Setting Up Subsystems/drugtesting",draft:!1,editUrl:"https://github.com/regalonefour/regalonefour.github.io/blob/main/docs/r14-evidence/Installation Process/Setting Up Subsystems/drugtesting.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Drug Testing",description:"Drug Testing and qb-smallresources"},sidebar:"tutorialSidebar",previous:{title:"Vehicle Tampers/Fingerprints",permalink:"/r14-evidence/Installation Process/Setting Up Subsystems/vehicletampers"},next:{title:"Lock Tamperings",permalink:"/r14-evidence/Installation Process/Setting Up Subsystems/locktamperings"}},l={},u=[{value:"Out of the Box",id:"out-of-the-box",level:2}],d={toc:u},c="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"setting-up-the-drug-testing-system"},"Setting Up The Drug Testing System"),(0,i.kt)("h2",{id:"out-of-the-box"},"Out of the Box"),(0,i.kt)("p",null,"By default, r14-evidence has built-in triggers for the base drug items included with qb-smallresources and an optional config\nline for jim-consumables. If you have added new, custom drugs to qb-smallreosurces or use a different consumables script for your\ndrug items overal, you will need to either modify your drug resource or examine it to set up the r14-evidence drug testing config\nto integrate with it. These edits will require adding server event tiggers to properly trigger r14-evidence to set drug status, or\nfinding the server events fired in the script when drugs are used so the config can automatically generate a trigger. "),(0,i.kt)("h1",{id:"configuring-a-third-party-script"},"Configuring A Third Party Script"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='r14-evidence Drug Config' showLineNumbers",title:"'r14-evidence",Drug:!0,"Config'":!0,showLineNumbers:!0},"--[[---------- Drug Testing Config ----------\n\nThis table allows you to set up or completely disable drug testing in the script, out of the box, r14-evidence is set up to work with the drugs included \nin qb-core through built-in event listeners/handlers both in the server and client. If you are using a third party drug script, you can use the EventTriggers\nsubfield to set up custom event handlers to integreate with your drug/consumables script, or you can follow the guide at regalonefour.github.io to insert\ncustom event triggers into your drug/consumables resource code in order to trigger the proper drug testing events in r14-evidence.\n\nBelow, we will add a sample config for a hypothetical drug script in which were we specify the paramaters that will trigger drug usage.\n\n    [4] = {\n        event = 'customdrugs:server:cocaine', -- REQUIRED IF NOT USING JIMS VARIABLE, name of the event to listen for\n        drugType = 'cocaine' -- REQUIRED, specify the config drug test that will be set positive by this event trigger\n        type = 'server', -- OPTIONAL, will default to server if not specified, if you want to use a client event you must specify client\n        positiveTime = 4, -- OPTIONAL, specify a custom time in hours for the character to return positive\n        drugArgPos = 4, -- OPTIONAL, if your script uses one event for multiple drugs, you can access an argument to validate the drug \n        drugArgSubfield = 'drugName', -- OPTIONAL, if your argument is a table, specify the name of the key to be accessed\n        drugArgValue = 'cocaine', -- OPTIONAL, the value the argument should be to trigger the drug usage, by default this will be true if not specified and you have specified an arg, this can also be a table for multiple drugs\n        cidArgPos = 2, -- OPTIONAL, if your server event is being triggered by the server for some reason, specify the arg of the player CID, not needed if triggering from client\n        cidArgSubfield = , -- OPTIONAL, specify the subfield if the arg is a table, not needed if triggering from client, not needed if triggering from client\n        sourceArgPos = 3, -- OPTIONAL, if your server event is being triggered by the server for some reason, specify the source fo the player to find their CID, not needed if triggering from client\n        souceArgSubfield = originalSource, -- OPTIONAL, specify the original source subfield if the arg is a table, such as here arg[3].originalSource, not needed if triggering from client\n    },\n\n--]]------------------------------------------\n\nConfig.DrugTesting = {\n    Enabled = true,\n    UsingQBSR = true, -- set to true if you are using basic qb-smallresources, if not you will need to specify an event trigger or edit your consumables resource\n    DefaultPositiveTime = 2, -- number, in hours, that a player remains positive for a drug test (does not extend past script reset)\n    Drugs = { -- these are DRUG TYPES that show up on your drug test, avoid adding too many as they will make the drug test results cluttered and oversized\n        ['weed'] = {\n            label = 'Marijuana'\n        },\n        ['oxycodone'] = {\n            label = 'Oxycodone',\n        },\n        ['ecstacy'] = {\n            label = \"Ecstacy\",\n        },\n        ['cocaine'] = {\n            label = 'Cocaine',\n        },\n        ['meth'] = {\n            label = 'Methamphetamine',\n        },\n    },\n    EventTriggers = {\n        --[1] = {event = 'consumables:server:useMeth', type = 'server', drugType = 'meth', positiveTime = 4},\n        --[2] = {event = 'evidence:client:SetStatus', type = 'client', drugType = 'weed', drugArgPos = 1, drugArgSubfield = nil, drugArgValue = 'weedsmell'}, -- this is how you could trigger weed in QBSR \n        [1] = { -- event trigger for jim-consumables\n            event = 'jim-consumables:server:toggleItem', \n            drugArgPos = 2,\n            drugArgValue = { -- add additional drug items here\n                ['joint'] = 'weed',\n                ['cokebaggy'] = 'cocaine',\n                ['crackbaggy'] = 'cocaine',\n                ['xtcbaggy'] = 'ecstacy',\n                ['oxy'] = 'oxycodone',\n                ['meth'] = 'meth',\n            }\n        },    \n    }\n}\n")),(0,i.kt)("p",null,"Here we can see the Config.Breathalyzer table found in r14-evidence and a brief explanation of how it works. By default, support for ESX and qb-smallresources are included out of the box\nto handle increasing BAC using the ",(0,i.kt)("inlineCode",{parentName:"p"},"evidence:client:setstatus")," event for qb-core and the ",(0,i.kt)("inlineCode",{parentName:"p"},"esx:setStatus")," event for ESX which can be used to apply the ",(0,i.kt)("inlineCode",{parentName:"p"},"drunk")," status. If we have a third-party\nscript that does not already include support for either of these methods, and it is open-source, we can create a configuration for the breathalyzer subsystem to be triggered when alochol\nitems are used. To use the script in this way, lets go ahead an find an example script to use to set up a configuration, in this case lets use boii-consumables from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/boiidevelopment/boii-consumables-qb"},"https://github.com/boiidevelopment/boii-consumables-qb"),"\nto set up support for it. It is open-source, and will allow us to examine the code for events we can use."),(0,i.kt)("h1",{id:"integrating-a-third-party-script"},"Integrating A Third Party Script"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Never make changes to ",(0,i.kt)("strong",{parentName:"p"},"ANY")," script without making a backup first, you never know what might happen!")),(0,i.kt)("p",null,"If you have added additional drugs in qb-smallresources, or perhaps use an entirely different script for drug\nitems, you can add support for drug testing in r14-evidence simply by adding a server event trigger at some point\nin your drug item code. To better understand how to add these events, we can take a look at the code used to integrate\nr14-evidence with qb-smallresources. We'll start with the client-side event handler that is triggered when a player\nsmokes weed in order to apply a status effect."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Client-side Network Event Handler" showLineNumbers',title:'"Client-side',Network:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},"RegisterNetEvent('evidence:client:SetStatus', function(statusId, time, abv)\n    if Config.Breathalyzer and (statusId == 'alcohol' or statusId == 'heavyalcohol') then\n        TriggerServerEvent('evidence:server:IncreaseBAC', abv or 15) -- increases BAC by .015 or by abv if a third argument is supplied\n    end\n\n    //highlight-start\n    if Config.DrugTesting.Enabled and Config.DrugTesting.UsingQBSR and statusId == 'weedsmell' then\n        TriggerServerEvent('evidence:server:SetDrugStatus', {drug = 'weed'})\n    end\n    //highlight-end\n\n    if time > 0 and Config.StatusList[statusId] then\n        if (CurrentStatusList == nil or CurrentStatusList[statusId] == nil) or (CurrentStatusList[statusId] and CurrentStatusList[statusId].time < 20) then\n            CurrentStatusList[statusId] = {\n                text = Config.StatusList[statusId],\n                time = time\n            }\n            Config.Functions.Notify(''..CurrentStatusList[statusId].text..'')\n        end\n    elseif Config.StatusList[statusId] then\n        CurrentStatusList[statusId] = nil\n    end\n    TriggerServerEvent('evidence:server:UpdateStatus', CurrentStatusList)\nend)\n")),(0,i.kt)("p",null,"Similiar to the breathalzyer integration, our client-side event handler is triggered when a player completes the progress bar after using a joint\nitem, meaning that is an effective time to set the drug usage in r14-evidence. By simply adding a conditional statement here, we check if the status\neffect is 'weedsmell' and then trigger the ",(0,i.kt)("inlineCode",{parentName:"p"},"'evidence:server:SetDrugStatus'")," event. We create table containing the ",(0,i.kt)("inlineCode",{parentName:"p"},"drug")," subfield which equals the\nname of the drug from our config, in this case ",(0,i.kt)("inlineCode",{parentName:"p"},"'weed'")," and that is it! There are a few ways we can trigger this event as seen below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Triggering the Drug Status Network Event"',title:'"Triggering',the:!0,Drug:!0,Status:!0,Network:!0,'Event"':!0},"TriggerServerEvent('evidence:server:SetDrugStatus', {drug = 'cocaine'})\n\nTriggerEvent('evidence:server:SetDrugStatus', {cid= GetPlayerData(source).citizenid, drug = 'weed'})\n\n")),(0,i.kt)("p",null,"Here we can see the first trigger is the same as in our above example, we simply supply a table with the drug name that we want the player to test positive\nfor and then the server-side event handler will automatically grab the player's citizen ID. If we want to trigger this from the server, we can also do so by\nadding a ",(0,i.kt)("inlineCode",{parentName:"p"},"cid'")," field to our argument data table. As an example of how to use these events in a script, lets look at qb-small resources and check how it\nhandles the oxy item!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='qb-smallresources Server-side CreateUseableItem()' showLineNumbers",title:"'qb-smallresources","Server-side":!0,"CreateUseableItem()'":!0,showLineNumbers:!0},'QBCore.Functions.CreateUseableItem("oxy", function(source)\n    TriggerClientEvent("consumables:client:oxy", source)\nend)\n')),(0,i.kt)("p",null,"In this function, we can see that when the ",(0,i.kt)("inlineCode",{parentName:"p"},"oxy")," item is used that it triggers a client event. This would not be an appropriate place to add our drug test\nstatus event trigger as it would automatically set a player as positive even if they canceled using it! Instead, lets follow this code to the client-side and see\nif there is a better place to put it!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="qb-smallresources Client-side Networked Event Handler" showLineNumbers',title:'"qb-smallresources',"Client-side":!0,Networked:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},'RegisterNetEvent(\'consumables:client:oxy\', function()\n    QBCore.Functions.Progressbar("use_oxy", "Healing", 2000, false, true, {\n        disableMovement = false,\n        disableCarMovement = false,\n        disableMouse = false,\n        disableCombat = true,\n    }, {\n        animDict = "mp_suicide",\n        anim = "pill",\n        flags = 49,\n    // highlight-start\n    }, {}, {}, function() -- Done\n        StopAnimTask(PlayerPedId(), "mp_suicide", "pill", 1.0)\n        TriggerServerEvent("consumables:server:useOxy")\n        TriggerEvent("inventory:client:ItemBox", QBCore.Shared.Items["oxy"], "remove")\n        ClearPedBloodDamage(PlayerPedId())\n        HealOxy()\n    // highlight-end\n    end, function() -- Cancel\n        StopAnimTask(PlayerPedId(), "mp_suicide", "pill", 1.0)\n        QBCore.Functions.Notify("Canceled", "error")\n    end)\nend)\n')),(0,i.kt)("p",null,"In this client-side code, we can see that using the ",(0,i.kt)("inlineCode",{parentName:"p"},"'oxy'")," item starts a progress bar which the player can cancel, or allow to complete\nin order to use the drug. In this part of the progress bar completion function would be a perfect place to trigger our server event. Let's go\nand place the TriggerServerEvent() function we need to trigger r14-evidence to set a player positive for the ",(0,i.kt)("inlineCode",{parentName:"p"},"'oxycodone'")," drug in our config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Modified qb-smallresources Client-side Networked Event Handler" showLineNumbers',title:'"Modified',"qb-smallresources":!0,"Client-side":!0,Networked:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},'RegisterNetEvent(\'consumables:client:oxy\', function()\n    QBCore.Functions.Progressbar("use_oxy", "Healing", 2000, false, true, {\n        disableMovement = false,\n        disableCarMovement = false,\n        disableMouse = false,\n        disableCombat = true,\n    }, {\n        animDict = "mp_suicide",\n        anim = "pill",\n        flags = 49,\n    }, {}, {}, function() -- Done\n        StopAnimTask(PlayerPedId(), "mp_suicide", "pill", 1.0)\n        // highlight-next-line\n        TriggerServerEvent(\'evidence:server:SetDrugStatus\', {drug = \'oxycodone\'})\n        TriggerServerEvent("consumables:server:useOxy")\n        TriggerEvent("inventory:client:ItemBox", QBCore.Shared.Items["oxy"], "remove")\n        ClearPedBloodDamage(PlayerPedId())\n        HealOxy()\n    end, function() -- Cancel\n        StopAnimTask(PlayerPedId(), "mp_suicide", "pill", 1.0)\n        QBCore.Functions.Notify("Canceled", "error")\n    end)\nend)\n')),(0,i.kt)("p",null,"Here we can see that we have added our event trigger, and now when a player uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"'oxy'")," item, r14-evidence will receive this information\nand automatically set the player's character as positive for the ",(0,i.kt)("inlineCode",{parentName:"p"},"'oxycodone'")," drug listed in our drug config. While this is a perfectly\nacceptable place to put this event, if this was a different script, where this effect was handled entirely on the server, we may want to find a\nplace on the server-side code to place our event trigger. Let's follow this code to the server and see if there is an acceptable place for it!"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='qb-smallresources Server-side Networked Event Handler'",title:"'qb-smallresources","Server-side":!0,Networked:!0,Event:!0,"Handler'":!0},"RegisterNetEvent('consumables:server:useOxy', function()\n    local Player = QBCore.Functions.GetPlayer(source)\n\n    if not Player then return end\n\n    Player.Functions.RemoveItem('oxy', 1)\nend)\n")),(0,i.kt)("p",null,"In this event handler, we can see that the client triggers this server event to remove the used item from the player inventory. Since this is\nonly triggered upon successful use of the ",(0,i.kt)("inlineCode",{parentName:"p"},"'oxy'")," item this is a perfect place to put our event trigger for r14-evidence. However, this time,\nsince we are triggering a server event from the server, we must specify the citizen ID of the player's character as well since the script does\nnot have a source to use to find it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='Modified qb-smallresources Server-side Networked Event Handler'",title:"'Modified","qb-smallresources":!0,"Server-side":!0,Networked:!0,Event:!0,"Handler'":!0},"RegisterNetEvent('consumables:server:useOxy', function()\n    local Player = QBCore.Functions.GetPlayer(source)\n\n    if not Player then return end\n\n    // highlight-next-line\n    TriggerEvent('evidence:server:SetDrugStatus', {cid= Player.PlayerData.citizenid, drug = 'oxycodone'})\n\n    Player.Functions.RemoveItem('oxy', 1)\nend)\n")),(0,i.kt)("p",null,"We can see that the script already runs ",(0,i.kt)("inlineCode",{parentName:"p"},"QBCore.Functions.GetPlayer()")," and stores the player's information in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Player")," variable. It checks\nto make sure that it actually found a player as well, and we can place our event trigger below this so it is only triggered if ",(0,i.kt)("inlineCode",{parentName:"p"},"Player")," has a value\npreventing a potential error where we attempt to index a nil value. We then specify our drug as ",(0,i.kt)("inlineCode",{parentName:"p"},"'oxycodone'")," to match our config, and that is it!\nYou can use this same logic to modify any script yout have access to the code for, but if your consumables or drug script is escrowed, you need to reach\nout to the dev responsible for it!"))}g.isMDXComponent=!0}}]);