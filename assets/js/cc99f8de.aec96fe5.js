"use strict";(self.webpackChunkr_14_documentation=self.webpackChunkr_14_documentation||[]).push([[548],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),m=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=m(e.components);return o.createElement(l.Provider,{value:n},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=m(t),d=i,g=u["".concat(l,".").concat(d)]||u[d]||h[d]||a;return t?o.createElement(g,r(r({ref:n},c),{},{components:t})):o.createElement(g,r({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,r[1]=s;for(var m=2;m<a;m++)r[m]=t[m];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},819:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var o=t(7462),i=(t(7294),t(3905));const a={sidebar_position:2,title:"Breathalyzer",description:"BAC and qb-smallresources"},r="Setting Up The Breathalyzer System",s={unversionedId:"r14-evidence/Installation Process/Setting Up Subsystems/breathalyzer",id:"r14-evidence/Installation Process/Setting Up Subsystems/breathalyzer",title:"Breathalyzer",description:"BAC and qb-smallresources",source:"@site/docs/r14-evidence/Installation Process/Setting Up Subsystems/breathalyzer.md",sourceDirName:"r14-evidence/Installation Process/Setting Up Subsystems",slug:"/r14-evidence/Installation Process/Setting Up Subsystems/breathalyzer",permalink:"/r14-evidence/Installation Process/Setting Up Subsystems/breathalyzer",draft:!1,editUrl:"https://github.com/regalonefour/regalonefour.github.io/blob/main/docs/r14-evidence/Installation Process/Setting Up Subsystems/breathalyzer.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Breathalyzer",description:"BAC and qb-smallresources"},sidebar:"tutorialSidebar",previous:{title:"Garage Integration",permalink:"/r14-evidence/Installation Process/Setting Up Subsystems/garages"},next:{title:"Vehicle Tampers/Fingerprints",permalink:"/r14-evidence/Installation Process/Setting Up Subsystems/vehicletampers"}},l={},m=[{value:"Out of the Box",id:"out-of-the-box",level:2}],c={toc:m},u="wrapper";function h(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"setting-up-the-breathalyzer-system"},"Setting Up The Breathalyzer System"),(0,i.kt)("h2",{id:"out-of-the-box"},"Out of the Box"),(0,i.kt)("p",null,"By default, r14-evidence is designed to integrate with qb-smallresources without any further configuration or\nmodification to the script. The way this is handled by default is through the ",(0,i.kt)("inlineCode",{parentName:"p"},"'evidence:client:SetStatus'"),"\nclient-side networked event handler used by the original qb-policejob/client/evidence.lua. With built in event\ntriggers in qb-smallresources, r14-evidence will receieve SetStatus events with the alcohol tag and automatically\nuse them to increase a player's blood alcohol content by .0015. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Client-side Network Event Handler" showLineNumbers',title:'"Client-side',Network:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},"RegisterNetEvent('evidence:client:SetStatus', function(statusId, time, abv)\n    //highlight-start\n    if Config.Breathalyzer and (statusId == 'alcohol' or statusId == 'heavyalcohol') then\n        TriggerServerEvent('evidence:server:IncreaseBAC', abv or 15) -- increases BAC by .015 or by abv if a third argument is supplied\n    end\n    //highlight-end\n\n    if Config.DrugTesting.Enabled and Config.DrugTesting.UsingQBSR and statusId == 'weedsmell' then\n        TriggerServerEvent('evidence:server:SetDrugStatus', {drug = 'weed'})\n    end\n\n    if time > 0 and Config.StatusList[statusId] then\n        if (CurrentStatusList == nil or CurrentStatusList[statusId] == nil) or (CurrentStatusList[statusId] and CurrentStatusList[statusId].time < 20) then\n            CurrentStatusList[statusId] = {\n                text = Config.StatusList[statusId],\n                time = time\n            }\n            Config.Functions.Notify(''..CurrentStatusList[statusId].text..'')\n        end\n    elseif Config.StatusList[statusId] then\n        CurrentStatusList[statusId] = nil\n    end\n    TriggerServerEvent('evidence:server:UpdateStatus', CurrentStatusList)\nend)\n")),(0,i.kt)("p",null,"If you are using a third-party script to handle your alcohol consumables, we have two options, we can either configure the\nevents it uses in the r14-evidence config, or we can modify the consumables resource to trigger specific events in r14-evidence\nwhich will control the BAC of a player. We will examine both options, starting with the simpler method of simply configuring\nsupport for the script!"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Never make changes to ",(0,i.kt)("strong",{parentName:"p"},"ANY")," script without making a backup first, you never know what might happen!")),(0,i.kt)("h1",{id:"configuring-a-third-party-script"},"Configuring A Third Party Script"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="r14-evidence Breathalyzer Config" showLineNumbers',title:'"r14-evidence',Breathalyzer:!0,'Config"':!0,showLineNumbers:!0},"--[[------------ Breathalyzer Config ----------------\n\nThis table allows you to set up or completely disable breathalying in this script. Out of the box, r14-evidence provides support for qb-core smallresources through\na built in event handler, and requires set up to use with other frameworks and third party resources. You can use the EventTriggers subfield below to set up\nevents which will trigger ABV increases for a player that can be tested using the breahtalyzer target option by police characters, or you can follow the guide at\nregalonefour.github.io to insert the appropriate event triggers into your consumables or inventory resource in order to trigger the proper ABV increase.\n\n    [2] = {\n        event = 'consumables:server:drinkAlcohol', -- name of the event\n        type = 'server', -- OPTIONAL, server or client to specify which type of event\n        alcoholArgPos = 1, -- OPTIONAL, the position of the argument recieved in the event handler\n        alocholArgSubField = 'item', -- OPTIONAL, if the arg is a table, the subfield you want to check such as in this case arg[1].item\n        alcoholArgValue = { -- OPTIONAL, the value the argument should be equal to in order to trigger, can either be a value or a table\n            ['beer'] = true, \n            ['vodka'] = 20, -- you can specify a custom ABV by setting the key equal to a value instead of true, in this case it will raise ABV by 0.02 instead of 0.15\n        },\n    },\n\n--]]--------------------------------------------------\n\n\nConfig.Breathalyzer = {\n    Enabled = true, -- set this to true if you want to use the breathalyzer events contained in this script (may require additional setup if not using qb-smallresources)\n    UsingESX = true, -- set this to true if you are using ESX and want to use the native ESX.setPlayerStatus function to set BAC\n    EventTriggers = {\n        [1] = {event = 'hypothetical_consumables:server:consumedrink', type = 'server', alocholArgPos = 2, alocholArgSubField = 'item', alcoholArgValue = 'margarita', cidArgPos = nil},\n    },\n}\n")),(0,i.kt)("p",null,"Here we can see the Config.Breathalyzer table found in r14-evidence and a brief explanation of how it works. By default, support for ESX and qb-smallresources are included out of the box\nto handle increasing BAC using the ",(0,i.kt)("inlineCode",{parentName:"p"},"evidence:client:setstatus")," event for qb-core and the ",(0,i.kt)("inlineCode",{parentName:"p"},"esx:setStatus")," event for ESX which can be used to apply the ",(0,i.kt)("inlineCode",{parentName:"p"},"drunk")," status. If we have a third-party\nscript that does not already include support for either of these methods, and it is open-source, we can create a configuration for the breathalyzer subsystem to be triggered when alochol\nitems are used. To use the script in this way, lets go ahead an find an example script to use to set up a configuration, in this case lets use boii-consumables from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/boiidevelopment/boii-consumables-qb"},"https://github.com/boiidevelopment/boii-consumables-qb"),"\nto set up support for it. It is open-source, and will allow us to examine the code for events we can use."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Please keep in mind this is specific to this version of boii-consumables, you will need to apply the general concepts from this guide to other\nscripts, not the exact code.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="boii-consumables Alcohol Function" showLineNumbers',title:'"boii-consumables',Alcohol:!0,'Function"':!0,showLineNumbers:!0},"local function Alcohol(itemname)\n    local player = PlayerPedId()\n    if Config.Consumables.Alcohol[itemname].dualprops then\n        Core.Functions.Progressbar('consumables_alcohol', Config.Consumables.Alcohol[itemname].bartext, Config.Consumables.Alcohol[itemname].bartime*1000, false, true, {\n            disableMovement = false,\n            disableCarMovement = false,\n            disableMouse = false,\n            disableCombat = false\n        }, {\n            animDict = Config.Consumables.Alcohol[itemname].dict,\n            anim = Config.Consumables.Alcohol[itemname].animation,\n            flags = Config.Consumables.Alcohol[itemname].flags\n        }, {\n            model = Config.Consumables.Alcohol[itemname].prop,\n            bone = Config.Consumables.Alcohol[itemname].bones,\n            coords = Config.Consumables.Alcohol[itemname].coord,\n            rotation = Config.Consumables.Alcohol[itemname].rotat\n        }, {\n            model = Config.Consumables.Alcohol[itemname].prop2,\n            bone = Config.Consumables.Alcohol[itemname].bones2,\n            coords = Config.Consumables.Alcohol[itemname].coord2,\n            rotation = Config.Consumables.Alcohol[itemname].rotat2\n        }, function()\n            //highlight-start\n            AlcoholCount = AlcoholCount + Config.Consumables.Alcohol[itemname].alcoholcount\n            TriggerServerEvent('boii-consumables:sv:RemoveItem', itemname, 1)\n            TriggerServerEvent(RemoveStress, Config.Consumables.Alcohol[itemname].stress)\n            TriggerServerEvent('boii-consumables:sv:AddMeta', Config.Consumables.Alcohol[itemname].hunger, Config.Consumables.Alcohol[itemname].thirst)\n            if Config.Consumables.Alcohol[itemname].shouldreturn then\n                TriggerServerEvent('boii-consumables:sv:AddItem', Config.Consumables.Alcohol[itemname].returnitem, 1)\n            end\n            if AlcoholCount > 3 and AlcoholCount < 7 then -- Edit the amount of alcohol required to trigger drunk effects here\n                LightDrunk()\n            elseif AlcoholCount >= 7 then\n                HeavyDrunk()\n            end\n            if (Config.Consumables.Alcohol[itemname].sickchance >= math.random(1, 100)) then\n                ThrowUp(player, Config.Consumables.Alcohol[itemname].removehealth, Config.Consumables.Alcohol[itemname].stress)\n            end\n            //highlight-end\n        end, function() -- Cancel\n            TriggerEvent('inventory:client:busy:status', false)\n            TriggerEvent('boii-consumables:notify', Language.Shared['cancelled'], 'primary')\n        end)\n    else\n        Core.Functions.Progressbar('consumables_alcohol', Config.Consumables.Alcohol[itemname].bartext, Config.Consumables.Alcohol[itemname].bartime*1000, false, true, {\n            disableMovement = false,\n            disableCarMovement = false,\n            disableMouse = false,\n            disableCombat = false\n        }, {\n            animDict = Config.Consumables.Alcohol[itemname].dict,\n            anim = Config.Consumables.Alcohol[itemname].animation,\n            flags = Config.Consumables.Alcohol[itemname].flags\n        }, {\n            model = Config.Consumables.Alcohol[itemname].prop,\n            bone = Config.Consumables.Alcohol[itemname].bones,\n            coords = Config.Consumables.Alcohol[itemname].coord,\n            rotation = Config.Consumables.Alcohol[itemname].rotat\n        }, {}, function()\n            //highlight-start\n            AlcoholCount = AlcoholCount + Config.Consumables.Alcohol[itemname].alcoholcount\n            TriggerServerEvent('boii-consumables:sv:RemoveItem', itemname, 1)\n            TriggerServerEvent(RemoveStress, Config.Consumables.Alcohol[itemname].stress)\n            TriggerServerEvent('boii-consumables:sv:AddMeta', Config.Consumables.Alcohol[itemname].hunger, Config.Consumables.Alcohol[itemname].thirst)\n            if Config.Consumables.Alcohol[itemname].shouldreturn then\n                TriggerServerEvent('boii-consumables:sv:AddItem', Config.Consumables.Alcohol[itemname].returnitem, 1)\n            end\n            if AlcoholCount > 3 and AlcoholCount < 7 then -- Edit the amount of alcohol required to trigger drunk effects here\n                LightDrunk()\n            elseif AlcoholCount >= 7 then\n                HeavyDrunk()\n            end\n            if (Config.Consumables.Alcohol[itemname].sickchance >= math.random(1, 100)) then\n                ThrowUp(player, Config.Consumables.Alcohol[itemname].removehealth, Config.Consumables.Alcohol[itemname].stress)\n            end\n            //highlight-end\n        end, function() -- Cancel\n            TriggerEvent('inventory:client:busy:status', false)\n            TriggerEvent('boii-consumables:notify', Language.Shared['cancelled'], 'primary')\n        end)\n    end\nend\n")),(0,i.kt)("p",null,"Here we see the function triggered by the use of alcohol items generates a progress bar, this means that it's possible for a player to begin drinking\nan item, cancel it, and then not have any drunk status effects applied. This means like drugs, we want to only attempt to use events triggered upon\nsuccessful COMPLETION of the progressbar. These sections are highlighted above. Lets take a closer look and figure out what we can do."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="boii-consumables Successful Alcohol Use Code" showLineNumbers',title:'"boii-consumables',Successful:!0,Alcohol:!0,Use:!0,'Code"':!0,showLineNumbers:!0},"    AlcoholCount = AlcoholCount + Config.Consumables.Alcohol[itemname].alcoholcount\n    TriggerServerEvent('boii-consumables:sv:RemoveItem', itemname, 1)\n    TriggerServerEvent(RemoveStress, Config.Consumables.Alcohol[itemname].stress)\n    TriggerServerEvent('boii-consumables:sv:AddMeta', Config.Consumables.Alcohol[itemname].hunger, Config.Consumables.Alcohol[itemname].thirst)\n    if Config.Consumables.Alcohol[itemname].shouldreturn then\n        TriggerServerEvent('boii-consumables:sv:AddItem', Config.Consumables.Alcohol[itemname].returnitem, 1)\n    end\n    if AlcoholCount > 3 and AlcoholCount < 7 then -- Edit the amount of alcohol required to trigger drunk effects here\n        LightDrunk()\n    elseif AlcoholCount >= 7 then\n        HeavyDrunk()\n    end\n    if (Config.Consumables.Alcohol[itemname].sickchance >= math.random(1, 100)) then\n        ThrowUp(player, Config.Consumables.Alcohol[itemname].removehealth, Config.Consumables.Alcohol[itemname].stress)\n    end\n")),(0,i.kt)("p",null,"While we could follow the LightDrunk() and HeavyDrunk() functions to see if there are other places on the client-side we could configure an event for, we can\nsee the triggering of a few server events here that remove the item from the player's inventory when a drink is consumed. Because we can configure server events\nthese are likely going to be our ideal places to configure an event trigger in r14-evidence. We can see that the ",(0,i.kt)("inlineCode",{parentName:"p"},"'boii-consumables:sv:RemoveItem'")," removes the\nalcohol item from our inventory when its used by sending its name to the server. We can use this to set up our config in evidence by checking this value and including\nit in the ",(0,i.kt)("inlineCode",{parentName:"p"},"AlcoholArgValue")," value. Lets create a test line for the ",(0,i.kt)("inlineCode",{parentName:"p"},"beer")," item. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="r14-evidence Config For boii-consumables" showLineNumbers',title:'"r14-evidence',Config:!0,For:!0,'boii-consumables"':!0,showLineNumbers:!0},"    Config.Breathalyzer = {\n        Enabled = true, -- set this to true if you want to use the breathalyzer events contained in this script (may require additional setup if not using qb-smallresources)\n        UsingESX = true, -- set this to true if you are using ESX and want to use the native ESX.setPlayerStatus function to set BAC\n        EventTriggers = {\n            [1] = {event = 'boii-consumables:sv:RemoveItem', type = 'server', alocholArgPos = 1, alcoholArgValue = 'beer'},\n        },\n    }\n")),(0,i.kt)("p",null,"Saving this in our config, we can now restart r14-evidence and attempt to drink a beer. We can enable ",(0,i.kt)("inlineCode",{parentName:"p"},"PrintEventTriggerArgs")," in our debug variables in order to print the results\nto our server console as well! We can see that the item name is sent as the first argument, it is a simple string and not a table so we do not need to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"alcoholArgSubfield"),"\nvariable to access it, and we set our ",(0,i.kt)("inlineCode",{parentName:"p"},"alcoholArgValue")," equal to item name we want to increase BAC. Now when we drink a beer, we should see an increase in our BAC if we use the\n",(0,i.kt)("inlineCode",{parentName:"p"},"/selfbreathalyze")," command from r14-evidence to test our player character while in the server."),(0,i.kt)("p",null,"Now that we have confirmed this works, we may want to expand it to encompass all our alcohol items! You could create a seperate line in ",(0,i.kt)("inlineCode",{parentName:"p"},"Config.Breathalzyer.EventTriggers")," for each\nitem, or you can modify the ",(0,i.kt)("inlineCode",{parentName:"p"},"alcoholArgValue")," to be a table that contains the list of items we want to use. Lets try this, and let's go ahead and indent our table so it is easier to\nread."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="r14-evidence Config For boii-consumables" showLineNumbers',title:'"r14-evidence',Config:!0,For:!0,'boii-consumables"':!0,showLineNumbers:!0},"    Config.Breathalyzer = {\n        Enabled = true, -- set this to true if you want to use the breathalyzer events contained in this script (may require additional setup if not using qb-smallresources)\n        UsingESX = true, -- set this to true if you are using ESX and want to use the native ESX.setPlayerStatus function to set BAC\n        EventTriggers = {\n            [1] = {\n                event = 'boii-consumables:sv:RemoveItem', \n                type = 'server', \n                alocholArgPos = 1, \n                alcoholArgValue = {\n                    ['beer'] = true,\n                    ['vodka'] = 20,\n                    ['marg'] = true,\n                    ['moonshine'] = 25,\n                }\n            },\n        },\n    }\n")),(0,i.kt)("p",null,"Here we have now defiend ",(0,i.kt)("inlineCode",{parentName:"p"},"beer"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"vodka"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"marg"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"moonshine")," as alcohol items checked for by our breathalyzer event. We can either set these items equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"TRUE")," to increase\nthe player's BAC by the standard ",(0,i.kt)("inlineCode",{parentName:"p"},"0.015")," as the script will assign a value of ",(0,i.kt)("inlineCode",{parentName:"p"},"15")," in the absence of a custom defined ABV, or we can set this equal to a number between 1 and 1000. In this\ncase we can see we have set ",(0,i.kt)("inlineCode",{parentName:"p"},"moonshine")," equal to ",(0,i.kt)("inlineCode",{parentName:"p"},"25")," or a ",(0,i.kt)("inlineCode",{parentName:"p"},"0.025")," increase in BAC and ",(0,i.kt)("inlineCode",{parentName:"p"},"vodka")," now increases BAC by ",(0,i.kt)("inlineCode",{parentName:"p"},"0.02")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"20")," units instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"15"),". We must add all the items we want\nto trigger a BAC increase if we choose to take this route for our config, or we can choose to edit our script to integrate it with r14-evidence."),(0,i.kt)("h1",{id:"integrating-a-third-party-script"},"Integrating A Third Party Script"),(0,i.kt)("p",null,"If you do not use qb-smallresources, and your consumable script that you use for alcohol does not come with built in\ntriggers for the ",(0,i.kt)("inlineCode",{parentName:"p"},"'evidence:client:SetStatus'")," network event, you or a dev for your server can add these events\nif you have access to the source code! If you aren't able to modify the resource directly due to escrow, consider asking\nthe developer to add it themselves. In order to understand where we want to make our edits, lets take a look at how\nqb-smallresrouces handles consumables and where it triggers this event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Server-side Create Useable Item Function" showLineNumbers',title:'"Server-side',Create:!0,Useable:!0,Item:!0,'Function"':!0,showLineNumbers:!0},'QBCore.Functions.CreateUseableItem("beer", function(source, item)\n    TriggerClientEvent("consumables:client:DrinkAlcohol", source, item.name)\nend)\n')),(0,i.kt)("p",null,"Here, we can see the item ",(0,i.kt)("inlineCode",{parentName:"p"},"'beer'")," being made useable by the above function, it triggers a client-side event in\nthe consumables.lua, and then ends. If this was a script you were attempting to modify, adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"evidence:client:SetStatus"),"\nevent trigger here would automatically set the increase in BAC the moment an item is used. We should follow this event to see how the\nitem is used before adding it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Client-side Network Event Handler" showLineNumbers',title:'"Client-side',Network:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},'RegisterNetEvent(\'consumables:client:DrinkAlcohol\', function(itemName)\n    TriggerEvent(\'animations:client:EmoteCommandStart\', {"drink"})\n    QBCore.Functions.Progressbar("snort_coke", "Drinking liquor..", math.random(3000, 6000), false, true, {\n        disableMovement = false,\n        disableCarMovement = false,\n        disableMouse = false,\n        disableCombat = true,\n    }, {}, {}, {}, function() -- Done\n        TriggerEvent(\'animations:client:EmoteCommandStart\', {"c"})\n        TriggerEvent("inventory:client:ItemBox", QBCore.Shared.Items[itemName], "remove")\n        TriggerServerEvent("consumables:server:drinkAlcohol", itemName)\n        TriggerServerEvent("consumables:server:addThirst", QBCore.Functions.GetPlayerData().metadata["thirst"] + ConsumablesAlcohol[itemName])\n        TriggerServerEvent(\'hud:server:RelieveStress\', math.random(2, 4))\n        alcoholCount += 1\n        if alcoholCount > 1 and alcoholCount < 4 then\n            // highlight-next-line\n            TriggerEvent("evidence:client:SetStatus", "alcohol", 200)\n        elseif alcoholCount >= 4 then\n            // highlight-next-line\n            TriggerEvent("evidence:client:SetStatus", "heavyalcohol", 200)\n        end\n\n    end, function() -- Cancel\n        TriggerEvent(\'animations:client:EmoteCommandStart\', {"c"})\n        QBCore.Functions.Notify("Cancelled..", "error")\n    end)\nend)\n')),(0,i.kt)("p",null,"Here, in the client-side event triggered by the usage of the ",(0,i.kt)("inlineCode",{parentName:"p"},"'beer'")," item, we can see it then invokes the Progress Bar function\nnative to qb-core. Using the comments, we can see that the middle part of the code block contains a function which is triggered when\nthe progress bar is completed, and a little lower, the function that is triggered if the progress bar is canceled. Since we only want\nto increase the BAC of a player who actually drinks the beer, this is the best spot for the ",(0,i.kt)("inlineCode",{parentName:"p"},"'evidence:client:SetStatus'")," event\ntrigger to be placed."),(0,i.kt)("p",null,"We can similarly trigger this same event from the server-side if needed. If you have a resource that handles consumables differently,\nyou may need to search for a place in a server function or event handler. Let's return to the example we used in the configuration guide\nand examine our event from ",(0,i.kt)("inlineCode",{parentName:"p"},"boii-consumables-qb")," to see where we may need to make an edit to our resource to integreate it with r14-evidence."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="boii-consumables Alcohol Function" showLineNumbers',title:'"boii-consumables',Alcohol:!0,'Function"':!0,showLineNumbers:!0},"local function Alcohol(itemname)\n    local player = PlayerPedId()\n    if Config.Consumables.Alcohol[itemname].dualprops then\n        Core.Functions.Progressbar('consumables_alcohol', Config.Consumables.Alcohol[itemname].bartext, Config.Consumables.Alcohol[itemname].bartime*1000, false, true, {\n            disableMovement = false,\n            disableCarMovement = false,\n            disableMouse = false,\n            disableCombat = false\n        }, {\n            animDict = Config.Consumables.Alcohol[itemname].dict,\n            anim = Config.Consumables.Alcohol[itemname].animation,\n            flags = Config.Consumables.Alcohol[itemname].flags\n        }, {\n            model = Config.Consumables.Alcohol[itemname].prop,\n            bone = Config.Consumables.Alcohol[itemname].bones,\n            coords = Config.Consumables.Alcohol[itemname].coord,\n            rotation = Config.Consumables.Alcohol[itemname].rotat\n        }, {\n            model = Config.Consumables.Alcohol[itemname].prop2,\n            bone = Config.Consumables.Alcohol[itemname].bones2,\n            coords = Config.Consumables.Alcohol[itemname].coord2,\n            rotation = Config.Consumables.Alcohol[itemname].rotat2\n        }, function()\n            //highlight-start\n            AlcoholCount = AlcoholCount + Config.Consumables.Alcohol[itemname].alcoholcount\n            TriggerServerEvent('boii-consumables:sv:RemoveItem', itemname, 1)\n            TriggerServerEvent(RemoveStress, Config.Consumables.Alcohol[itemname].stress)\n            TriggerServerEvent('boii-consumables:sv:AddMeta', Config.Consumables.Alcohol[itemname].hunger, Config.Consumables.Alcohol[itemname].thirst)\n            if Config.Consumables.Alcohol[itemname].shouldreturn then\n                TriggerServerEvent('boii-consumables:sv:AddItem', Config.Consumables.Alcohol[itemname].returnitem, 1)\n            end\n            if AlcoholCount > 3 and AlcoholCount < 7 then -- Edit the amount of alcohol required to trigger drunk effects here\n                LightDrunk()\n            elseif AlcoholCount >= 7 then\n                HeavyDrunk()\n            end\n            if (Config.Consumables.Alcohol[itemname].sickchance >= math.random(1, 100)) then\n                ThrowUp(player, Config.Consumables.Alcohol[itemname].removehealth, Config.Consumables.Alcohol[itemname].stress)\n            end\n            //highlight-end\n        end, function() -- Cancel\n            TriggerEvent('inventory:client:busy:status', false)\n            TriggerEvent('boii-consumables:notify', Language.Shared['cancelled'], 'primary')\n        end)\n    else\n        Core.Functions.Progressbar('consumables_alcohol', Config.Consumables.Alcohol[itemname].bartext, Config.Consumables.Alcohol[itemname].bartime*1000, false, true, {\n            disableMovement = false,\n            disableCarMovement = false,\n            disableMouse = false,\n            disableCombat = false\n        }, {\n            animDict = Config.Consumables.Alcohol[itemname].dict,\n            anim = Config.Consumables.Alcohol[itemname].animation,\n            flags = Config.Consumables.Alcohol[itemname].flags\n        }, {\n            model = Config.Consumables.Alcohol[itemname].prop,\n            bone = Config.Consumables.Alcohol[itemname].bones,\n            coords = Config.Consumables.Alcohol[itemname].coord,\n            rotation = Config.Consumables.Alcohol[itemname].rotat\n        }, {}, function()\n            //highlight-start\n            AlcoholCount = AlcoholCount + Config.Consumables.Alcohol[itemname].alcoholcount\n            TriggerServerEvent('boii-consumables:sv:RemoveItem', itemname, 1)\n            TriggerServerEvent(RemoveStress, Config.Consumables.Alcohol[itemname].stress)\n            TriggerServerEvent('boii-consumables:sv:AddMeta', Config.Consumables.Alcohol[itemname].hunger, Config.Consumables.Alcohol[itemname].thirst)\n            if Config.Consumables.Alcohol[itemname].shouldreturn then\n                TriggerServerEvent('boii-consumables:sv:AddItem', Config.Consumables.Alcohol[itemname].returnitem, 1)\n            end\n            if AlcoholCount > 3 and AlcoholCount < 7 then -- Edit the amount of alcohol required to trigger drunk effects here\n                LightDrunk()\n            elseif AlcoholCount >= 7 then\n                HeavyDrunk()\n            end\n            if (Config.Consumables.Alcohol[itemname].sickchance >= math.random(1, 100)) then\n                ThrowUp(player, Config.Consumables.Alcohol[itemname].removehealth, Config.Consumables.Alcohol[itemname].stress)\n            end\n            //highlight-end\n        end, function() -- Cancel\n            TriggerEvent('inventory:client:busy:status', false)\n            TriggerEvent('boii-consumables:notify', Language.Shared['cancelled'], 'primary')\n        end)\n    end\nend\n")),(0,i.kt)("p",null,"As before we can see the function triggered by the use of alcohol items generates a progress bar, this means that it's possible for a player to begin\ndrinking an item, cancel it, and then not have any drunk status effects applied. This means like drugs, we want to only attempt to use events triggered\nupon successful COMPLETION of the progressbar. These sections are highlighted above, but we will take a closer look and add some code that will trigger\nthe status event in r14-evidence!"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Please keep in mind this is specific to this version of boii-consumables, you will need to apply the general concepts from this guide to other\nscripts, not the exact code.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="boii-consumables Successful Alcohol Use Code" showLineNumbers',title:'"boii-consumables',Successful:!0,Alcohol:!0,Use:!0,'Code"':!0,showLineNumbers:!0},'    AlcoholCount = AlcoholCount + Config.Consumables.Alcohol[itemname].alcoholcount\n    TriggerServerEvent(\'boii-consumables:sv:RemoveItem\', itemname, 1)\n    TriggerServerEvent(RemoveStress, Config.Consumables.Alcohol[itemname].stress)\n    TriggerServerEvent(\'boii-consumables:sv:AddMeta\', Config.Consumables.Alcohol[itemname].hunger, Config.Consumables.Alcohol[itemname].thirst)\n    if Config.Consumables.Alcohol[itemname].shouldreturn then\n        TriggerServerEvent(\'boii-consumables:sv:AddItem\', Config.Consumables.Alcohol[itemname].returnitem, 1)\n    end\n    if AlcoholCount > 3 and AlcoholCount < 7 then -- Edit the amount of alcohol required to trigger drunk effects here\n        LightDrunk()\n    elseif AlcoholCount >= 7 then\n        HeavyDrunk()\n    end\n    //highlight-start\n\n    if AlcoholCount > 0 and alcoholCount < 4 then\n        TriggerEvent("evidence:client:SetStatus", "alcohol", 200)\n    elseif alcoholCount >= 4 then\n        TriggerEvent("evidence:client:SetStatus", "heavyalcohol", 200)\n    end\n    //highlight-end\n    if (Config.Consumables.Alcohol[itemname].sickchance >= math.random(1, 100)) then\n        ThrowUp(player, Config.Consumables.Alcohol[itemname].removehealth, Config.Consumables.Alcohol[itemname].stress)\n    end\n')),(0,i.kt)("p",null,"Here we can see we now check if our AlcoholCount is above 0, which it should always be once this event has triggered, if the player has used less than\nfour alcohol items it will trigger ",(0,i.kt)("inlineCode",{parentName:"p"},"'evidence:client:SetStatus'")," with the ",(0,i.kt)("inlineCode",{parentName:"p"},"alochol")," status, and above 4 it will instead trigger ",(0,i.kt)("inlineCode",{parentName:"p"},"heavyalcohol"),". By triggering\nthis status we do not need check if the item is an alcohol item because boii-consumnables is handling this logic, and r14-evidence will automatically apply\na BAC increase of ",(0,i.kt)("inlineCode",{parentName:"p"},"0.15")," by supplying the default value of ",(0,i.kt)("inlineCode",{parentName:"p"},"15")," units for the ABV."),(0,i.kt)("p",null,"If say, we want to instead trigger our BAC increase manually, we can follow one of the event triggers in the above code to the server-side of our code, and\nmake a modification there instead to trigger r14-evidence. When we follow this client event to the server, we can insert a ",(0,i.kt)("inlineCode",{parentName:"p"},"TriggerClientEvent()")," which\nwill allow r14-evidence to register the usage of an alcohol item and then increaes the BAC and apply the status effect."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Server-side Network Event Handler" showLineNumbers',title:'"Server-side',Network:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},"RegisterServerEvent('boii-consumables:sv:RemoveItem', function(itemremove, amount)\n    local src = source\n    local Player = Core.Functions.GetPlayer(src)\n    if Player.Functions.RemoveItem(itemremove, tonumber(amount)) then\n        TriggerClientEvent('inventory:client:ItemBox', src, Core.Shared.Items[itemremove], 'remove', tonumber(amount))\n    end\n    //highlight-next-line\n    TriggerClientEvent('evidence:client:SetStatus', source, 'alcohol')\nend)\n")),(0,i.kt)("p",null,"If we only use this event for alcohol items we could simply add a blanket ",(0,i.kt)("inlineCode",{parentName:"p"},"TriggerClientEvent()")," that will set the status of the player in\nr14-evidence and thus the BAC incrase, but this event is used for ALL items in boii-consumables so we need to add some extra logic to restrict\nit to only alcohol items. The config contains a list of alcohol items, and we can simply use the itemname argument to check against it."),(0,i.kt)("p",null,"In this modified event handler, we now properly check if the item name is in our ",(0,i.kt)("inlineCode",{parentName:"p"},"Config.Consumables.Alcohol")," table and even add the ability\nto add a custom ABV field to those items to manually set how much the item will increase the player BAC. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="boii-consumables Config" showLineNumbers',title:'"boii-consumables','Config"':!0,showLineNumbers:!0},"    Alcohol = {\n        ['beer_am'] = {\n            alcoholcount = 1, -- Amount to increase alcohol count\n            sickchance = math.random(5,10), -- Chance to be sick if risky = true\n            removehealth = math.random(5, 8), -- Amount of health to remove if risky = true\n            hunger = 0, -- Amount of hunger to receive\n            thirst = math.random(25,40), -- Amount of thirst to receive\n            stress = math.random(3,6), -- Amount of stress to remove\n            bartext = 'Drinking A.M..', -- Progress bar text\n            bartime = math.random(2,5), -- Progress bar time\n            shouldreturn = true, -- Toggle if item should be returned; false = no return item; true = return item\n            returnitem = 'empty_glass_bottle', -- Item to return if returns = true\n            dict = 'mp_player_intdrink', -- Animation dictionary\n            animation = 'loop_bottle', -- Animation\n            flags = 49, -- Animation flags\n            dualprops = false, -- Toggle use of 2 props; false = 1 prop, true = 2 props\n            prop = 'prop_beer_amopen', -- Prop 1\n            bones = 60309, -- Bone index 1\n            coords = vector3(-0.005, 0.00, -0.09), -- Prop coords 1\n            rotation = vector3(0.0, 0.0, 0.0), -- Prop rotation 1\n            prop2 = '', -- Prop 2\n            bones2 = '', -- Bone index 2\n            coords2 = '', -- Prop coords 2\n            rotation2 = '', -- Prop rotation 2\n            //highlight-next-line\n            ABV = 30,\n        },\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Server-side Network Event Handler" showLineNumbers',title:'"Server-side',Network:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},"RegisterServerEvent('boii-consumables:sv:RemoveItem', function(itemremove, amount)\n    local src = source\n    local Player = Core.Functions.GetPlayer(src)\n    if Player.Functions.RemoveItem(itemremove, tonumber(amount)) then\n        TriggerClientEvent('inventory:client:ItemBox', src, Core.Shared.Items[itemremove], 'remove', tonumber(amount))\n    end\n    //highlight-start\n    if Config.Consumables.Alcohol[itemremove] then\n        local count = Config.Consumables.Alcohol[itemremove].alcoholcount\n        local customABV = Config.Consumables.Alcohol[itemremove].ABV\n\n        TriggerClientEvent('evidence:client:SetStatus', source, 'alcohol', customABV or count and 15 * count)\n    end\nend)\n")),(0,i.kt)("p",null,"Now if there is a ABV value defined in the config for that alcohol item, the script will send it as the ABV argument, or if there is not\nand the alcoholcount variable is present it will use it to calculate the ABV. In this case ",(0,i.kt)("inlineCode",{parentName:"p"},"beer_am")," has an alcoholcount of ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," and thus would\nonly be 15. However, if we made a moonshine item with an alcoholcount of 3 in this script, it would then send ",(0,i.kt)("inlineCode",{parentName:"p"},"45")," to r14-evidence instead\nand raise the ABV of our player by ",(0,i.kt)("inlineCode",{parentName:"p"},"0.045")," instead of the standard ",(0,i.kt)("inlineCode",{parentName:"p"},"0.015"),"."))}h.isMDXComponent=!0}}]);