"use strict";(self.webpackChunkr_14_documentation=self.webpackChunkr_14_documentation||[]).push([[527],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),f=c(n),y=r,p=f["".concat(s,".").concat(y)]||f[y]||u[y]||i;return n?a.createElement(p,o(o({ref:t},d),{},{components:n})):a.createElement(p,o({ref:t},d))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[f]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8909:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:5,title:"Setting Up Player Identifiers",description:"Updating our config or our database for player identifiers."},o=void 0,l={unversionedId:"r14-evidence/Installation Process/esx/sql",id:"r14-evidence/Installation Process/esx/sql",title:"Setting Up Player Identifiers",description:"Updating our config or our database for player identifiers.",source:"@site/docs/r14-evidence/Installation Process/esx/sql.md",sourceDirName:"r14-evidence/Installation Process/esx",slug:"/r14-evidence/Installation Process/esx/sql",permalink:"/r14-evidence/Installation Process/esx/sql",draft:!1,editUrl:"https://github.com/regalonefour/regalonefour.github.io/blob/main/docs/r14-evidence/Installation Process/esx/sql.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Setting Up Player Identifiers",description:"Updating our config or our database for player identifiers."},sidebar:"tutorialSidebar",previous:{title:"4. ESX/Standalone Installation",permalink:"/category/4-esxstandalone-installation"},next:{title:"5. Setting Up The Camera",permalink:"/r14-evidence/Installation Process/camera"}},s={},c=[{value:"Modifying Our Config",id:"modifying-our-config",level:2}],d={toc:c},f="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(f,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you do not have player citizen id's, blood types, or fingerprints accessible either in PlayerData or via a callback/export, you can skip this section\nand proceed to the SQL step which will set up your ev_identifier database!")),(0,r.kt)("p",null,"Originally built out from and integrated with qb-core, r14-evidence uses several player identifiers not found natively in ESX or potentially in\nother Standalone Frameworks, meaning we are required to either supply this information through the configurable PlayerData fu nctions or intentionally\nleave it blank and set up a database table for r14-evidence so that it can generate them for players. If you have modified your version of ESX or it's\nPlayerData functions, you may simply need to update the config so that r14-evidence can pull them. If not, don't worry, a simple SQL statement is all\nthat stands between you and evidence running properly."),(0,r.kt)("h2",{id:"modifying-our-config"},"Modifying Our Config"),(0,r.kt)("p",null,"There are two primary functions in the config file that handle how PlayerData is fetched for the script to function. In both ESX and QBCore, we can use the\nGetPlayerData() function on the client-side and either the GetPlayer() or GetPlayerFromId() functions on the server-side. You can see how these functions are\nhandled by default, and see that r14-evidence does not attempt to fetch any data for the human-readable citizenid, blood type, or fingerprint or fingerprint\nfields when using the default implementation for ESX. However, for qb-core, because this data is stored in the PlayerData for each character, it simply pulls\nthe information and does not attempt to generate it on its own."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='Server-side Player Data Function' showLineNumbers",title:"'Server-side",Player:!0,Data:!0,"Function'":!0,showLineNumbers:!0},"    PlayerDataServer = function(source) -- gets player data on server\n        if Config.Framework.ESX then\n            local PlyData = ESX.GetPlayerFromId(source)\n\n            local PlayerData = {\n                identifier = PlyData.identifier,\n                citizenid = nil,\n                bloodtype = nil,\n                fingerprint = nil,\n                firstname = PlyData.variables.firstName,\n                lastname = PlyData.variables.lastName,\n                job = PlyData.job.name,\n                jobgrade = PlyData.job.grade,\n            }\n\n            return PlayerData\n        elseif Config.Framework.QB then\n            local PlyData = QBCore.Functions.GetPlayer(source).PlayerData\n\n            local PlayerData = {\n                identifier = PlyData.citizenid,\n                citizenid = PlyData.citizenid,\n                bloodtype = PlyData.metadata.bloodtype,\n                fingerprint = PlyData.metadata.fingerprint,\n                firstname = PlyData.charinfo.firstname,\n                lastname = PlyData.charinfo.lastname,\n                job = PlyData.job.name,\n                jobgrade = tostring(PlyData.job.grade.level),\n                jobtype = PlyData.job.type,\n            }\n\n            return PlayerData\n        elseif Config.Framework.Standalone then\n            -- there is nothing here, you must write it\n        end\n    end,\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='Server-side Player Data Function' showLineNumbers",title:"'Server-side",Player:!0,Data:!0,"Function'":!0,showLineNumbers:!0},"    PlayerDataClient = function()\n        if Config.Framework.ESX then\n            local PlyData = ESX.GetPlayerData()\n\n            local PlayerData = {\n                identifier = PlyData.identifier,\n                citizenid = nil, -- the script will generate a unique citizen id for each character based on the unique character identifier\n                bloodtype = nil, -- the script will assign a bloodtype for each character based on the unique character identifier\n                fingerprint = nil, -- the script will generate a unique fingerprint for each character based on the unique character identifier\n                firstname = PlyData.firstName,\n                lastname = PlyData.lastName,\n                job = PlyData.job?.name,\n                jobgrade = PlyData.job?.grade,\n            }\n\n            return PlayerData\n        elseif Config.Framework.QB then\n            local PlyData = QBCore.Functions.GetPlayerData()\n\n            local PlayerData = {\n                identifier = PlyData.citizenid,\n                citizenid = PlyData.citizenid,\n                bloodtype = PlyData.metadata.bloodtype,\n                fingerprint = PlyData.metadata.fingerprint,\n                firstname = PlyData.charinfo.firstname,\n                lastname = PlyData.charinfo.lastname,\n                job = PlyData.job.name,\n                jobgrade = tostring(PlyData.job.grade.level),\n                jobtype = PlyData.job.type,\n            }\n\n            return PlayerData\n        elseif Config.Framework.Standalone then\n            -- there is nothing here, you must write it\n        end\n    end,\n")),(0,r.kt)("p",null,"If you have made a modification to your framework, and store these values somewhere that you would like the script to use, it's a simple matter of simply creating a way to\nfetch this information in the config. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='Server-side Player Data Function' showLineNumbers",title:"'Server-side",Player:!0,Data:!0,"Function'":!0,showLineNumbers:!0},"    PlayerDataClient = function()\n        if Config.Framework.ESX then\n            local PlyData = ESX.GetPlayerData()\n            //highlight-start\n            local fingerprintCallback = nil\n\n            ESX.TriggerServerCallback('fake-fingerprint-script:getFingerprint', function(result)\n                fingerprintCallback = result or 'not found'\n            end, PlyData.identifier)\n\n            while not fingerprintCallback do\n                Wait(100)\n            end\n            \n            //highlight-end\n\n            local PlayerData = {\n                identifier = PlyData.identifier,\n                //highlight-start\n                citizenid = exports['fake-citizen-id-script']:getPlayerCitizenId(),\n                bloodtype = PlyData.custombloodtype, -- lets say we have modified our playerdata to keep track of bloodtype\n                fingerprint = fingerprintCallback, -- use the fingerprint we fetched from the callback\n                //highlight-end\n                firstname = PlyData.firstName,\n                lastname = PlyData.lastName,\n                job = PlyData.job?.name,\n                jobgrade = PlyData.job?.grade,\n            }\n \n            return PlayerData\n        elseif Config.Framework.QB then\n            -- temporarily removed\n        elseif Config.Framework.Standalone then\n            -- there is nothing here, you must write it\n        end\n    end,\n")),(0,r.kt)("p",null,"As you can see above, we have now modified our ",(0,r.kt)("inlineCode",{parentName:"p"},"Config.Functions.PlayerDataClient()")," function to now pull our custom identifiers from other scripts\nor places in our code using callbacks, exports, or our custom playerdata we have set up in our specific hypothetical server. As long as all of these\nare properly returned and not nil, the script will not attempt to generate them now. If they do not work and come back nil, or you simply don't have\na way to access them, we can proceedt to the SQL step of our install which will direct us how to set up our evidence identifiers database."))}u.isMDXComponent=!0}}]);