"use strict";(self.webpackChunkr_14_documentation=self.webpackChunkr_14_documentation||[]).push([[2317],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=c(n),m=i,g=h["".concat(l,".").concat(m)]||h[m]||d[m]||a;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4332:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={sidebar_position:2,title:"Breathalyzer",description:"BAC and qb-smallresources"},o="Setting Up The Breathalyzer System",s={unversionedId:"r14-evidence/Setting Up Subsystems/breathalyzer",id:"r14-evidence/Setting Up Subsystems/breathalyzer",title:"Breathalyzer",description:"BAC and qb-smallresources",source:"@site/docs/r14-evidence/Setting Up Subsystems/breathalyzer.md",sourceDirName:"r14-evidence/Setting Up Subsystems",slug:"/r14-evidence/Setting Up Subsystems/breathalyzer",permalink:"/r14-evidence/Setting Up Subsystems/breathalyzer",draft:!1,editUrl:"https://github.com/regalonefour/regalonefour.github.io/blob/main/docs/r14-evidence/Setting Up Subsystems/breathalyzer.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Breathalyzer",description:"BAC and qb-smallresources"},sidebar:"tutorialSidebar",previous:{title:"Garage Integration",permalink:"/r14-evidence/Setting Up Subsystems/garages"},next:{title:"Vehicle Tampers/Fingerprints",permalink:"/r14-evidence/Setting Up Subsystems/vehicletampers"}},l={},c=[{value:"Out of the Box",id:"out-of-the-box",level:2}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"setting-up-the-breathalyzer-system"},"Setting Up The Breathalyzer System"),(0,i.kt)("h2",{id:"out-of-the-box"},"Out of the Box"),(0,i.kt)("p",null,"By default, r14-evidence is designed to integrate with qb-smallresources without any further configuration or\nmodification to the script. The way this is handled by default is through the ",(0,i.kt)("inlineCode",{parentName:"p"},"'evidence:client:SetStatus'"),"\nclient-side networked event handler used by the original qb-policejob/client/evidence.lua. With built in event\ntriggers in qb-smallresources, r14-evidence will receieve SetStatus events with the alcohol tag and automatically\nuse them to increase a player's blood alcohol content by .0015. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Client-side Network Event Handler" showLineNumbers',title:'"Client-side',Network:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},"RegisterNetEvent('evidence:client:SetStatus', function(statusId, time, abv)\n    //highlight-start\n    if Config.Breathalyzer and (statusId == 'alcohol' or statusId == 'heavyalcohol') then\n        TriggerServerEvent('evidence:server:IncreaseBAC', abv or 15) -- increases BAC by .015 or by abv if a third argument is supplied\n    end\n    //highlight-end\n\n    if Config.DrugTesting.Enabled and Config.DrugTesting.UsingQBSR and statusId == 'weedsmell' then\n        TriggerServerEvent('evidence:server:SetDrugStatus', {drug = 'weed'})\n    end\n\n    if time > 0 and Config.StatusList[statusId] then\n        if (CurrentStatusList == nil or CurrentStatusList[statusId] == nil) or (CurrentStatusList[statusId] and CurrentStatusList[statusId].time < 20) then\n            CurrentStatusList[statusId] = {\n                text = Config.StatusList[statusId],\n                time = time\n            }\n            Config.Functions.Notify(''..CurrentStatusList[statusId].text..'')\n        end\n    elseif Config.StatusList[statusId] then\n        CurrentStatusList[statusId] = nil\n    end\n    TriggerServerEvent('evidence:server:UpdateStatus', CurrentStatusList)\nend)\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Never make changes to ",(0,i.kt)("strong",{parentName:"p"},"ANY")," script without making a backup first, you never know what might happen!")),(0,i.kt)("h1",{id:"integrating-a-third-party-script"},"Integrating A Third Party Script"),(0,i.kt)("p",null,"If you do not use qb-smallresources, and your consumable script that you use for alcohol does not come with built in\ntriggers for the ",(0,i.kt)("inlineCode",{parentName:"p"},"'evidence:client:SetStatus'")," network event, you or a dev for your server can add these events\nif you have access to the source code! If you aren't able to modify the resource directly due to escrow, consider asking\nthe developer to add it themselves. In order to understand where we want to make our edits, lets take a look at how\nqb-smallresrouces handles consumables and where it triggers this event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Server-side Create Useable Item Function" showLineNumbers',title:'"Server-side',Create:!0,Useable:!0,Item:!0,'Function"':!0,showLineNumbers:!0},'QBCore.Functions.CreateUseableItem("beer", function(source, item)\n    TriggerClientEvent("consumables:client:DrinkAlcohol", source, item.name)\nend)\n')),(0,i.kt)("p",null,"Here, we can see the item ",(0,i.kt)("inlineCode",{parentName:"p"},"'beer'")," being made useable by the above function, it triggers a client-side event in\nthe consumables.lua, and then ends. If this was a script you were attempting to modify, adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"evidence:client:SetStatus"),"\nevent trigger here would automatically set the increase in BAC the moment an item is used. We should follow this event to see how the\nitem is used before adding it."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Client-side Network Event Handler" showLineNumbers',title:'"Client-side',Network:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},'RegisterNetEvent(\'consumables:client:DrinkAlcohol\', function(itemName)\n    TriggerEvent(\'animations:client:EmoteCommandStart\', {"drink"})\n    QBCore.Functions.Progressbar("snort_coke", "Drinking liquor..", math.random(3000, 6000), false, true, {\n        disableMovement = false,\n        disableCarMovement = false,\n        disableMouse = false,\n        disableCombat = true,\n    }, {}, {}, {}, function() -- Done\n        TriggerEvent(\'animations:client:EmoteCommandStart\', {"c"})\n        TriggerEvent("inventory:client:ItemBox", QBCore.Shared.Items[itemName], "remove")\n        TriggerServerEvent("consumables:server:drinkAlcohol", itemName)\n        TriggerServerEvent("consumables:server:addThirst", QBCore.Functions.GetPlayerData().metadata["thirst"] + ConsumablesAlcohol[itemName])\n        TriggerServerEvent(\'hud:server:RelieveStress\', math.random(2, 4))\n        alcoholCount += 1\n        if alcoholCount > 1 and alcoholCount < 4 then\n            // highlight-next-line\n            TriggerEvent("evidence:client:SetStatus", "alcohol", 200)\n        elseif alcoholCount >= 4 then\n            // highlight-next-line\n            TriggerEvent("evidence:client:SetStatus", "heavyalcohol", 200)\n        end\n\n    end, function() -- Cancel\n        TriggerEvent(\'animations:client:EmoteCommandStart\', {"c"})\n        QBCore.Functions.Notify("Cancelled..", "error")\n    end)\nend)\n')),(0,i.kt)("p",null,"Here, in the client-side event triggered by the usage of the ",(0,i.kt)("inlineCode",{parentName:"p"},"'beer'")," item, we can see it then invokes the Progress Bar function\nnative to qb-core. Using the comments, we can see that the middle part of the code block contains a function which is triggered when\nthe progress bar is completed, and a little lower, the function that is triggered if the progress bar is canceled. Since we only want\nto increase the BAC of a player who actually drinks the beer, this is the best spot for the ",(0,i.kt)("inlineCode",{parentName:"p"},"'evidence:client:SetStatus'")," event\ntrigger to be placed."),(0,i.kt)("p",null,"We can similarly trigger this same event from the server-side if needed. If you have a resource that handles consumables differently,\nyou may need to search for a place in a server function or event handler. For example, in qb-smallresources, several drug items will\ntrigger a server event when their progress bar is finished. Let's take a look at the ",(0,i.kt)("inlineCode",{parentName:"p"},"'cokebaggy'")," item and attempt to pretend it is\nan alochol item we want to add our event trigger too."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Client-side Network Event Handler" showLineNumbers',title:'"Client-side',Network:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},'RegisterNetEvent(\'consumables:client:Cokebaggy\', function()\n    local ped = PlayerPedId()\n    QBCore.Functions.Progressbar("snort_coke", "Quick sniff..", math.random(5000, 8000), false, true, {\n        disableMovement = false,\n        disableCarMovement = false,\n        disableMouse = false,\n        disableCombat = true,\n    }, {\n        animDict = "switch@trevor@trev_smoking_meth",\n        anim = "trev_smoking_meth_loop",\n        flags = 49,\n    }, {}, {}, function() -- Done\n        StopAnimTask(ped, "switch@trevor@trev_smoking_meth", "trev_smoking_meth_loop", 1.0)\n        // highlight-next-line\n        TriggerServerEvent("consumables:server:useCokeBaggy")\n        TriggerEvent("inventory:client:ItemBox", QBCore.Shared.Items["cokebaggy"], "remove")\n        -- TriggerEvent("evidence:client:SetStatus", "widepupils", 200) -- let\'s pretend this isn\'t here\n        CokeBaggyEffect()\n    end, function() -- Cancel\n        StopAnimTask(ped, "switch@trevor@trev_smoking_meth", "trev_smoking_meth_loop", 1.0)\n        QBCore.Functions.Notify("Canceled..", "error")\n    end)\nend)\n')),(0,i.kt)("p",null,"When we follow this client event to the server, we can insert a ",(0,i.kt)("inlineCode",{parentName:"p"},"TriggerClientEvent()")," which will allow r14-evidence to\nregister the usage of an alcohol item and then increaes the BAC and apply the status effect."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Server-side Network Event Handler" showLineNumbers',title:'"Server-side',Network:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},"RegisterNetEvent('consumables:server:useCokeBaggy', function()\n    local Player = QBCore.Functions.GetPlayer(source)\n\n    if not Player then return end\n\n    Player.Functions.RemoveItem('cokebaggy', 1)\n    //highlight-next-line\n    TriggerClientEvent('evidence:client:SetStatus', source, 'alcohol', 30)\nend)\n")),(0,i.kt)("p",null,"This function is designed to remove the ",(0,i.kt)("inlineCode",{parentName:"p"},"'cokebaggy'")," item from the player after it used, since we know it will always be\ntriggered by a player who has used the item in question, and thus is an appropriate place to add the trigger. In this case we\nadd the following line to this network event at the end ",(0,i.kt)("inlineCode",{parentName:"p"},"TriggerClientEvent('evidence:client:SetStatus', source, 'alcohol', 30)"),",\nsending it to the player who triggered this server event by specifiying ",(0,i.kt)("inlineCode",{parentName:"p"},"source"),", supplying the second argument as ",(0,i.kt)("inlineCode",{parentName:"p"},"'alcohol'"),"\nfor the type of status to set in r14-evidence, and can supply an ",(0,i.kt)("strong",{parentName:"p"},"OPTIONAL")," third arugment which is a number between 0 and 1000 to\nspecify the amount to raise the player's BAC by. By default, when this argument isn't supplied, r14-evidence will supply a value of 15,\nor otherwise a 0.0015 increase in their BAC."))}d.isMDXComponent=!0}}]);