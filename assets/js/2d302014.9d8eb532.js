"use strict";(self.webpackChunkr_14_documentation=self.webpackChunkr_14_documentation||[]).push([[747],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},g="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),g=d(a),p=r,h=g["".concat(l,".").concat(p)]||g[p]||c[p]||i;return a?n.createElement(h,o(o({ref:t},u),{},{components:a})):n.createElement(h,o({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[g]="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5986:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1,title:"Garage Integration",description:"qb-garages by default"},o="Setting up Garage Integration",s={unversionedId:"r14-evidence/Installation Process/Setting Up Subsystems/garages",id:"r14-evidence/Installation Process/Setting Up Subsystems/garages",title:"Garage Integration",description:"qb-garages by default",source:"@site/docs/r14-evidence/Installation Process/Setting Up Subsystems/garages.md",sourceDirName:"r14-evidence/Installation Process/Setting Up Subsystems",slug:"/r14-evidence/Installation Process/Setting Up Subsystems/garages",permalink:"/r14-evidence/Installation Process/Setting Up Subsystems/garages",draft:!1,editUrl:"https://github.com/regalonefour/regalonefour.github.io/blob/main/docs/r14-evidence/Installation Process/Setting Up Subsystems/garages.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Garage Integration",description:"qb-garages by default"},sidebar:"tutorialSidebar",previous:{title:"8. Setting Up Subsystems",permalink:"/category/8-setting-up-subsystems"},next:{title:"Breathalyzer",permalink:"/r14-evidence/Installation Process/Setting Up Subsystems/breathalyzer"}},l={},d=[],u={toc:d},g="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(g,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-up-garage-integration"},"Setting up Garage Integration"),(0,r.kt)("h1",{id:"out-of-the-box"},"Out of the Box"),(0,r.kt)("p",null,"Integration with your garage resource is entirely OPTIONAL, by default r14-evidence is set up to integrate with qb-garages or\nesx_garage to automatically load evidence when vehicles are removed from a garage or to unload evidence from the main server\ntable when a vehicle is placed into one. This is NOT required, but makes our vehicle evidence handling on the server side a little\nmore resource efficient as it can detect when it needs to load vehicle evidence and when it can drop it from the server table. If you\nhave a custom garage script, the script will load evidence automatically when it is created while in the vehicle, and it will simply\nremain in the server-side table. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="r14-evidence Gararge Config Table" showLineNumbers',title:'"r14-evidence',Gararge:!0,Config:!0,'Table"':!0,showLineNumbers:!0},"Config.VehInAndOut = { -- this OPTIONALLY configures your server side event that triggers when garaging or ungaraging a vehicle, the paramaters for base qb-garages are included, cd_garages is not supported\n    InEvent = Config.Framework.ESX and 'esx_garage:updateOwnedVehicle' or 'qb-garage:server:updateVehicle',\n    InState = Config.Framework.ESX and true or 1, -- the state receieved when placing a vehicle in a garage\n    InStateVar = 1, -- the argument that is received for the vehicle state when putting it in a garage\n    InStateVarSubfield = nil, -- the subfield of the in state var in the table that is supplied, you can use a period to search multiple subfields\n    InPlateVar = Config.Framework.ESX and 4 or 5, -- the argument that is received for the vehicle plate when putting it in a garage\n    InPlateVarSubfield = Config.Framework.ESX and 'vehicleProps.plate', -- use a . to access further subfields\n    OutEvent = Config.Framework.ESX and 'esx_garage:updateOwnedVehicle' or 'qb-garage:server:updateVehicleState',\n    OutState = Config.Framework.ESX and false or 0,\n    OutStateVar = 1,\n    OutStateVarSubfield = nil, -- the subfield of the out state var in the table that is supplied, you can use a period to search multiple subfields\n    OutPlateVar = Config.Framework.ESX and 4 or 2,\n    OutPlateVarSubfield = Config.Framework.ESX and 'vehicleProps.plate', -- use a . to access further subfields\n}\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Never make changes to ",(0,r.kt)("strong",{parentName:"p"},"ANY")," script without making a backup first, you never know what might happen!")),(0,r.kt)("h1",{id:"integrating-a-third-party-script"},"Integrating A Third Party Script"),(0,r.kt)("p",null,"If you desire to configure r14-evidence to integreate with your garage script, you can use the following guide to help\nyou do so, but it is important to note that the script does not require it to function properly! By default, any existing\nevidence in the vehicle database will be loaded when a player either generates evidence in that vehicle, or when they search\nthat vehicle for evidence. It will simply remain in the server evidence table until the script restarts, but will not cause\nissues with the script beyond taking up additional memory. "),(0,r.kt)("p",null,"To better understand on how this config works, lets take a look at an older version of a popular modification of qb-garages by\nJDev, which uses a network event triggers of the same name, but with differently ordered arguments."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"This script was recently modified as of 10/2022 and no longer requires a modification to the config to be compatible! ")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="JonasDev99/qb-garages Server-side Network Event Handler" showLineNumbers',title:'"JonasDev99/qb-garages',"Server-side":!0,Network:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},"\nRegisterNetEvent('qb-garage:server:updateVehicle', function(state, fuel, engine, body, properties, plate, garage, location, damage)\n    if location and type(location) == 'vector3' then\n        if StoreDamageAccuratly then\n            MySQL.update('UPDATE player_vehicles SET state = ?, garage = ?, fuel = ?, engine = ?, body = ?, mods = ?, parkingspot = ?, damage = ? WHERE plate = ?',{state, garage, fuel, engine, body, json.encode(properties), json.encode(location), json.encode(damage), plate})\n        else\n            MySQL.update('UPDATE player_vehicles SET state = ?, garage = ?, fuel = ?, engine = ?, body = ?, mods = ?, parkingspot = ? WHERE plate = ?',{state, garage, fuel, engine, body, json.encode(properties), json.encode(location), plate})\n        end\n    else\n        if StoreDamageAccuratly then\n            MySQL.update('UPDATE player_vehicles SET state = ?, garage = ?, fuel = ?, engine = ?, body = ?, mods = ?, damage = ? WHERE plate = ?',{state, garage, fuel, engine, body, json.encode(properties), json.encode(damage), plate})\n        else\n            MySQL.update('UPDATE player_vehicles SET state = ?, garage = ?, fuel = ?, engine = ?, body = ?, mods = ? WHERE plate = ?', {state, garage, fuel, engine, body, json.encode(properties), plate})\n        end\n    end\nend)\n")),(0,r.kt)("p",null,"Here in ",(0,r.kt)("inlineCode",{parentName:"p"},"'qb-garage:server:updateVehicle'")," we can see that our original config uses this event to track when a vehicle is returned\nto it's garage, it will check the argument at the ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," position according to ",(0,r.kt)("inlineCode",{parentName:"p"},"InStateVar"),", and if it equals the value defined in\n",(0,r.kt)("inlineCode",{parentName:"p"},"InState")," r14-evidence will then save the vehicle's evidence to database and remove it from it's main evidence table. To do this, it\nneeds to find the plate of the vehicle in question, and checks the argument in position ",(0,r.kt)("inlineCode",{parentName:"p"},"5")," as defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"InPlateVar"),". When it does\nthis however, it pulls the vehicle properties table. In this case, we would need to change ",(0,r.kt)("inlineCode",{parentName:"p"},"InPlateVar")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"6")," in order it to properly\naccess the plate of this function!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="JonasDev99/qb-garages Server-side Network Event Handler" showLineNumbers',title:'"JonasDev99/qb-garages',"Server-side":!0,Network:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},"RegisterNetEvent('qb-garage:server:updateVehicleState', function(state, plate, garage)\n    MySQL.update('UPDATE player_vehicles SET state = ?, garage = ?, depotprice = ? WHERE plate = ?',{state, garage, 0, plate})\nend)\n")),(0,r.kt)("p",null,"To properly determine when a vehicle is pulled out of a garage, and to load it's evidence straight away, we again go to the server/main.lua to\nfind and access the ",(0,r.kt)("inlineCode",{parentName:"p"},"'qb-garage:server:updateVehicleState'"),"network event. Here, we check the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutStateVar")," at position ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," and compare\nit to the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutState"),". When it matches this, we then pull the plate from argument ",(0,r.kt)("inlineCode",{parentName:"p"},"2")," as defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"OutPlateVar")," and r14-evidence\nsubsequently loads the vehicle evidence from the database."),(0,r.kt)("h1",{id:"events-with-arguments-that-are-tables"},"Events With Arguments That Are Tables"),(0,r.kt)("p",null,"If you are using a garage script which sends information using arguments which are a table containing the necessary information to either store/spawn\nthe vehicle and it's properties, you can use the subfield variables in the config to accurately access them. Lets go ahead and create a custom version\nof the above event that uses a table to send all the information, and then create a configuration for it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Custom Version of JonasDev99/qb-garages Server-side Network Event Handler" showLineNumbers',title:'"Custom',Version:!0,of:!0,"JonasDev99/qb-garages":!0,"Server-side":!0,Network:!0,Event:!0,'Handler"':!0,showLineNumbers:!0},"RegisterNetEvent('qb-garage:server:updateVehicleState', function(data)\n    MySQL.update('UPDATE player_vehicles SET state = ?, garage = ?, depotprice = ? WHERE plate = ?',{data.state, data.info.garage, 0, data.info.plate})\nend)\n")),(0,r.kt)("p",null,"Here we see instead of getting multiple arguments containing our information, we simply get one argument named ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," which supplies the necessary\ninformation for our event handler. Now we must modify our config table for garages to correctly access this table! First lets go ahead and attempt\nto figure out the structure of the table. Above we can see that not only do we have the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," table, but two values stored in a table contained\nwithin the ",(0,r.kt)("inlineCode",{parentName:"p"},"data.info")," subfield. We can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"json.enocode(data, {indent = true})")," function to convert this table to a string to reveal more about how\nit is structured."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Data Argument Structure" showLineNumbers',title:'"Data',Argument:!0,'Structure"':!0,showLineNumbers:!0},"data = {\n    state = 3, -- this is usually 0 in this and most scripts, but we will set it to 3 to demonstrate in the config how to match it\n    info = {\n        garage = 'pillbox',\n        plate = 'MAD  OOC'\n        properties = {\n            color = 117,\n            fuel = 99,\n        }\n    }\n}\n")),(0,r.kt)("p",null,"We can see that we get the state of the vehicle (whether it is in a garage or not), as long as additional information about the vehicle that is being used by\nthe script to store in the database. Not all of this information is needed to integrate with r14-evidence, we simply need to find the plate being used\nwhich we can see in the ",(0,r.kt)("inlineCode",{parentName:"p"},"data.info.plate")," table above. To access this subfield we will need to create the string ",(0,r.kt)("inlineCode",{parentName:"p"},"info.plate")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"OutPlateVarSubfield")," to access\nboth the info subfield and then the plate value contained in it. Our config table will now look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="r14-evidence Gararge Config Table" showLineNumbers',title:'"r14-evidence',Gararge:!0,Config:!0,'Table"':!0,showLineNumbers:!0},"Config.VehInAndOut = { -- this OPTIONALLY configures your server side event that triggers when garaging or ungaraging a vehicle, the paramaters for base qb-garages are included, cd_garages is not supported\n    InEvent = Config.Framework.ESX and 'esx_garage:updateOwnedVehicle' or 'qb-garage:server:updateVehicle',\n    InState = Config.Framework.ESX and true or 1, -- the state receieved when placing a vehicle in a garage\n    InStateVar = 1, -- the argument that is received for the vehicle state when putting it in a garage\n    InStateVarSubfield = nil, -- the subfield of the in state var in the table that is supplied, you can use a period to search multiple subfields\n    InPlateVar = Config.Framework.ESX and 4 or 5, -- the argument that is received for the vehicle plate when putting it in a garage\n    InPlateVarSubfield = Config.Framework.ESX and 'vehicleProps.plate', -- use a . to access further subfields\n    //highlight-start\n    OutEvent = 'qb-garage:server:updateVehicleState',\n    OutState = 3, -- we match the 3 received in state\n    OutStateVar = 1, --\n    OutStateVarSubfield = 'state',    \n    OutPlateVar = 1,\n    OutPlateVarSubfield ='info.plate', -- use a . to access further subfields\n    //highlight-end\n}\n")),(0,r.kt)("p",null,"We set the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutEvent")," equal to the event being triggered which is ",(0,r.kt)("inlineCode",{parentName:"p"},"'qb-garage:server:updateVehicleState'"),", becuase we recieve a state value of 3 in our table, we will want to\nset ",(0,r.kt)("inlineCode",{parentName:"p"},"OutState")," equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"3")," so that it does not trigger when a vehicle is being put away. We are receiving the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," table as the first argument, so ",(0,r.kt)("inlineCode",{parentName:"p"},"OutStateVar")," remains ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),",\nand this is also where we receive our plate so we will set ",(0,r.kt)("inlineCode",{parentName:"p"},"OutPlateVar")," equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," as well. Finally, we need to access our plate at ",(0,r.kt)("inlineCode",{parentName:"p"},"data.info.plate")," so we set the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutPlateVarSubfield"),"\nequal ot ",(0,r.kt)("inlineCode",{parentName:"p"},"'info.plate'"),"."))}c.isMDXComponent=!0}}]);