"use strict";(self.webpackChunkr_14_documentation=self.webpackChunkr_14_documentation||[]).push([[956],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var i=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),d=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(l.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(t),h=o,y=u["".concat(l,".").concat(h)]||u[h]||f[h]||r;return t?i.createElement(y,a(a({ref:n},c),{},{components:t})):i.createElement(y,a({ref:n},c))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,a=new Array(r);a[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:o,a[1]=s;for(var d=2;d<r;d++)a[d]=t[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},4383:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=t(7462),o=(t(7294),t(3905));const r={sidebar_position:3,title:"Third-party inventories",description:"Understanding what is required and what edits are necessary."},a=void 0,s={unversionedId:"r14-evidence/Installation Process/inventory/standalone",id:"r14-evidence/Installation Process/inventory/standalone",title:"Third-party inventories",description:"Understanding what is required and what edits are necessary.",source:"@site/docs/r14-evidence/Installation Process/inventory/standalone.md",sourceDirName:"r14-evidence/Installation Process/inventory",slug:"/r14-evidence/Installation Process/inventory/standalone",permalink:"/r14-evidence/Installation Process/inventory/standalone",draft:!1,editUrl:"https://github.com/regalonefour/regalonefour.github.io/blob/main/docs/r14-evidence/Installation Process/inventory/standalone.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Third-party inventories",description:"Understanding what is required and what edits are necessary."},sidebar:"tutorialSidebar",previous:{title:"Updating qb-inventory",permalink:"/r14-evidence/Installation Process/inventory/qbinventory"},next:{title:"3. QB Core Installation",permalink:"/category/3-qb-core-installation"}},l={},d=[{value:"Adding Inventory Images",id:"adding-inventory-images",level:2},{value:"Understanding Metadata in r14-evidence",id:"understanding-metadata-in-r14-evidence",level:2},{value:"Writing Custom Inventory Functions",id:"writing-custom-inventory-functions",level:2}],c={toc:d},u="wrapper";function f(e){let{components:n,...r}=e;return(0,o.kt)(u,(0,i.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"This script is not guaranteed to be comptabile with inventory systems that are not either qb-inventory or\nox_inventory. It contains customizable functions that enable ",(0,o.kt)("strong",{parentName:"p"},"POTENTIAL")," compatability with third-party\ninventories that operate ",(0,o.kt)("strong",{parentName:"p"},"SIMILARLY")," to ox_inventory or qb_inventory. ")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Never make changes to ",(0,o.kt)("strong",{parentName:"p"},"ANY")," script without making a backup first, you never know what might happen!")),(0,o.kt)("h2",{id:"adding-inventory-images"},"Adding Inventory Images"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Upload your image files to your inventory resource",src:t(1351).Z,width:"2419",height:"1587"})),(0,o.kt)("p",null,"Our first step for integrating an unsupported third-party inventory will be by adding images for our items. This may be contained\nwithin the HTML files for the script similar to qb-inventory or ox_inventory, or could potentially be located in a images directory\nin the client-side folder. You may need to keep track of the images names to update the items in your specific inventory script."),(0,o.kt)("h2",{id:"understanding-metadata-in-r14-evidence"},"Understanding Metadata in r14-evidence"),(0,o.kt)("p",null,"The metadata supplied to evidence bag creation contains a wide-array of various fields to record the different information types\nsupplied with different evidence bag types. The first main metadata field created will be the ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," such as ",(0,o.kt)("inlineCode",{parentName:"p"},"'blood'"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"'casing'"),", or\n",(0,o.kt)("inlineCode",{parentName:"p"},"carcasing")," that is used by qb-inventory to sort what metadata to display. When using ox_inventory, this is changed to ",(0,o.kt)("inlineCode",{parentName:"p"},"evtype")," in\norder to not display it in the inventory screen. "),(0,o.kt)("p",null,"After this, there are a currently sixteen fields which display specific information about the piece of evidence the bag\nrespresents. This includes things like the label describing what is in the bag. The list is defined in the evmeta table\ncontained in ",(0,o.kt)("inlineCode",{parentName:"p"},"r14-evidence/server/main.lua")," which defines the label and order for the ox_inventory metadata conversion\nprocess. Fields without a label are displayed without a preceeding entry, and are built with them included such as ",(0,o.kt)("inlineCode",{parentName:"p"},"iteminfo"),"\nwhich is built based on the item contained in the bag."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='Metadata Fields and Labels' showLineNumbers",title:"'Metadata",Fields:!0,and:!0,"Labels'":!0,showLineNumbers:!0},"    local evmeta = {\n        [1] = {field = 'label', label = 'Type',},\n        [2] = {field = 'tracking', label = 'Tracking ID',},\n        [3] = {field = 'date', label = 'Date',},\n        [4] = {field = 'ammolabel', label = 'Caliber',},\n        [5] = {field = 'serie', label = 'Serial',},\n        [6] = {field = 'serial', label = 'Serial',},\n        [7] = {field = 'bloodtype', label = 'Bloodtype',},\n        [8] = {field = 'fingerprint', label = 'Fingeprint',},\n        [9] = {field = 'dnalabel', label = 'DNA Code',},\n        [10] = {field = 'vehname', label = 'Vehicle Model',},\n        [11] = {field = 'vehcolor', label = 'Vehicle Color',},\n        [12] = {field = 'plate', label = 'VIN Match',},\n        [13] = {field = 'result', label = 'Result',},\n        [14] = {field = 'iteminfo'},\n        [15] = {field = 'street', label = 'Collected',},\n        [16] = {field = 'description'},\n    }\n")),(0,o.kt)("p",null,"If you can't display metadata in your inventory script, it will simply make it much more difficult for players to interact\nwith evidence bags as they will need to use the item to see what is contained in it, rather than being able to at a glance\ntell what it is."),(0,o.kt)("h2",{id:"writing-custom-inventory-functions"},"Writing Custom Inventory Functions"),(0,o.kt)("p",null,"As of 3/25/2023, there are five server-side inventory functions and two client-side inventory functions defined in the\nr14-evidence config which governs how the script interacts with the inventory system. If you do not have a moderate to\nadvanced understanding of scripting, it is recommended that you contact a developer to write this integration. If you\nare going to attempt to do it yourself, please consult any documentation or the original developer of the inventory for\nsupport. Below we can see the config functions we use as a bridge, and can help guide you writing your own code."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"DO NOT ALTER")," the function arguments unless you edit the actual script to change what is sent to these functions, you \\\ncan use print() and json.encode() to help you figure out what is coming through these functions such as ",(0,o.kt)("inlineCode",{parentName:"p"},"print(json.encode(item))"),"\nto print contents of the item table sent to Config.Functions.AddItem."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='server-side inventory functions' showLineNumbers",title:"'server-side",inventory:!0,"functions'":!0,showLineNumbers:!0},'    AddItem = function(source, item, amount, slot, data, nobox) -- this function adds an item to inventory\n        if Config.Inventory.Ox then\n            local success, response = ox_inventory:AddItem(source, item, amount, data, slot)\n\n            if success then return true end\n        elseif Config.Inventory.QB then\n            local Player = QBCore.Functions.GetPlayer(source)\n            \n            if not nobox then TriggerClientEvent("inventory:client:ItemBox", source, QBCore.Shared.Items[item], "add") end\n            \n            return Player.Functions.AddItem(item, amount, slot, data)\n        elseif Config.Inventory.Standalone then\n            -- there is nothing here, you must write it\n        end\n    end,\n    RemoveItem = function(source, item, amount, slot, nobox) -- removes an item from the player inventory\n        if Config.Inventory.Ox then\n            local success = ox_inventory:RemoveItem(source, item, amount, false, slot)\n\n            if success then return true end\n        elseif Config.Inventory.QB then\n            local Player = QBCore.Functions.GetPlayer(source)\n\n            if not nobox then TriggerClientEvent("inventory:client:ItemBox", source, QBCore.Shared.Items[item], "remove") end\n            \n            return Player.Functions.RemoveItem(item, amount, slot)\n        elseif Config.Inventory.Standalone then\n            -- there is nothing here, you must write it\n        end\n    end,\n    UpdateMetadata = function(source, slot, data) -- this function is used to update an items metadata\n        if Config.Inventory.Ox then           \n            ox_inventory:SetMetadata(source, slot, data)\n        elseif Config.Inventory.QB then \n            local Player = QBCore.Functions.GetPlayer(source)\n\n            Player.PlayerData.items[slot].info = data\n\n            Player.Functions.SetInventory(Player.PlayerData.items, true)\n        elseif Config.Inventory.Standalone then\n            -- there is nothing here, you must write it\n        end\n    end,\n    GetInventoryServer = function(source) -- this function should return the player inventory table\n        if Config.Inventory.Ox then\n            return ox_inventory:GetInventory(source)?.items\n        elseif Config.Inventory.QB then\n            local Player = QBCore.Functions.GetPlayer(source)\n\n            return Player.PlayerData.items\n        elseif Config.Inventory.Standalone then\n            -- there is nothing here, you must write it\n        end\n    end,\n    CreateUseableItem = function(name, cbfunc)\n        if Config.Inventory.Ox then\n            exports(name, cbfunc)\n        elseif Config.Inventory.QB then\n            QBCore.Functions.CreateUseableItem(name, cbfunc)\n        elseif Config.Inventory.Standalone then\n            -- there is nothing here, you must write it\n        end\n    end,\n')),(0,o.kt)("p",null,"In addition to these server-side functions, we have two on the client-side of the script that are used to determine\nif a player has an item, as well as to fetch the caliber of the weapon being used by a player. You will need to create\nworking versions of these functions for your inventory framework to enable r14-evidence functionality such as targeting\nand casing creation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='client-side inventory functions' showLineNumbers",title:"'client-side",inventory:!0,"functions'":!0,showLineNumbers:!0},"    SearchInventoryClient = function(item, results) -- this function can be used to find an item in your inventory\n        if Config.Inventory.Ox then\n            local found = false\n\n            if ox_inventory:Search('count', item) > 0 then found = true end\n\n            if results then found = ox_inventory:Search('slots', item) end\n\n            return found\n        elseif Config.Inventory.QB then\n            local found = false\n            local PlayerData = QBCore.Functions.GetPlayerData()\n\n            for k, v in pairs(PlayerData.items) do\n                if v.name == item then found = true end\n            end\n\n            if results then found = PlayerData.items end\n\n            return found\n        elseif Config.Inventory.Standalone then\n            -- there is nothing here, you must write it\n        end        \n    end,\n    GetCaliber = function(weapon)\n        if Config.Inventory.Ox then \n            if not OxWeapons then \n                OxWeapons = {}                \n                for k, v in pairs(exports.ox_inventory:Items()) do if v.weapon then OxWeapons[v.hash or joaat(k)] = v.caliber end end\n            end\n\n            local caliber = OxWeapons and OxWeapons[weapon] or 'Unknown'\n        \n            return caliber\n        elseif Config.Framework.QB or Config.Inventory.QB then\n            local caliber = QBCore.Shared.Weapons[weapon] and QBCore.Shared.Weapons[weapon].caliber or 'Unknown'\n\n            return caliber\n        elseif Config.Inventory.Standalone then\n            -- there is nothing here, you must write it    \n        end\n    end,\n")))}f.isMDXComponent=!0},1351:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/addimages-b302fc05afcc637a1d3a6b7e164de720.png"}}]);