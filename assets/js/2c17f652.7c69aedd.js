"use strict";(self.webpackChunkr_14_documentation=self.webpackChunkr_14_documentation||[]).push([[500],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),p=i,f=u["".concat(l,".").concat(p)]||u[p]||h[p]||r;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8453:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:6,title:"6. Updating Our Database",description:"Updating our database for player vehicles and player identifiers."},o=void 0,s={unversionedId:"r14-evidence/Installation Process/sql",id:"r14-evidence/Installation Process/sql",title:"6. Updating Our Database",description:"Updating our database for player vehicles and player identifiers.",source:"@site/docs/r14-evidence/Installation Process/sql.md",sourceDirName:"r14-evidence/Installation Process",slug:"/r14-evidence/Installation Process/sql",permalink:"/r14-evidence/Installation Process/sql",draft:!1,editUrl:"https://github.com/regalonefour/regalonefour.github.io/blob/main/docs/r14-evidence/Installation Process/sql.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"6. Updating Our Database",description:"Updating our database for player vehicles and player identifiers."},sidebar:"tutorialSidebar",previous:{title:"5. Setting Up The Camera",permalink:"/r14-evidence/Installation Process/camera"},next:{title:"7. Installation Checklist \u2705",permalink:"/r14-evidence/Installation Process/checklist"}},l={},c=[{value:"Included Database Configuration",id:"included-database-configuration",level:2},{value:"Updating Our Player Vehicles Table",id:"updating-our-player-vehicles-table",level:2},{value:"Accessing Our Database",id:"accessing-our-database",level:2},{value:"Running our SQL Statement",id:"running-our-sql-statement",level:2},{value:"Verifying Our Change",id:"verifying-our-change",level:2},{value:"Player Identifiers (ESX or Standalone Frameworks ONLY)",id:"player-identifiers-esx-or-standalone-frameworks-only",level:2},{value:"Verifying Our Change",id:"verifying-our-change-1",level:2}],d={toc:c},u="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(u,(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"included-database-configuration"},"Included Database Configuration"),(0,i.kt)("p",null,"By default, r14-evidence is configured to access the player vehicle database tables created by default in qb-core and ESX. If you are using a\ncustom owned vehicles script, or are utilizing a resource like drx_mdw that accesses the ",(0,i.kt)("inlineCode",{parentName:"p"},"evidence")," column we need to create in our table, you\nmay need to alter the settings in our config.lua for r14-evidence. Here you may change the name of the vehicle table, the name of the plate and\nevidence columns in that table, and if we are using ESX or a standalone framework that needs to access player identifiers from the database the\nname of the table we create for it. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua",metastring:"title='r14-evidence Database Config' showLineNumbers",title:"'r14-evidence",Database:!0,"Config'":!0,showLineNumbers:!0},"Config.DB = { -- this config sets what table you are using to store vehicle evidence\n    Vehicle = Config.Framework.QB and 'player_vehicles' or Config.Framework.ESX and 'owned_vehicles', -- set this to your player vehicle table\n    Plate = 'plate', -- the column in your vehicle table that contains your license plate\n    Evidence = 'evidence', -- the column in your vehicle table that contains evidence info \n    Identifiers = 'ev_identifiers', -- if you use ESX or a standalone framework and need to generate citizenids, fingerprints, and bloodtypes, set this to your custom table\n}\n")),(0,i.kt)("h2",{id:"updating-our-player-vehicles-table"},"Updating Our Player Vehicles Table"),(0,i.kt)("p",null,"One of the last major steps of our installation process will be the modification of our vehicle database to hold vehicle evidence information\nthat will persist through server reset. This makes it possible for police to recover casings, blood, or fingerprints from player vehicles\neven after multiple server or script resets. Even if you are not experienced in managing your database, this is a relatively simple process\nand can be completed in just a few minutes. This guide will use the mariadb web interface included with servers maintained by ZAP Hosting, Inc\nbut should be simliar to most database web interfaces. "),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"Never make any changes to your database without making a backup. Losing code sucks, but losing unique player data is even worse!")),(0,i.kt)("h2",{id:"accessing-our-database"},"Accessing Our Database"),(0,i.kt)("p",null,"You will want to navigate to your player vehicles table, by default, this will be ",(0,i.kt)("inlineCode",{parentName:"p"},"player_vehicles")," in qb-core and with most garage\nscripts intended to integrate seamlessly with it. We will then want to run our SQL on our table to create a new column which will store\nour evidence information."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Preparing to run SQL",src:n(5300).Z,width:"2775",height:"1751"})),(0,i.kt)("h2",{id:"running-our-sql-statement"},"Running our SQL Statement"),(0,i.kt)("p",null,"We will then want to run the following SQL statement on our table, this is intended to add a column to the end of the table named ",(0,i.kt)("inlineCode",{parentName:"p"},"evidence"),"\nwhich will be accessed by the resource to store and load vehicle evidence. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:"title'SQL Statement To Be Run' showLineNumbers","title'SQL":!0,Statement:!0,To:!0,Be:!0,"Run'":!0,showLineNumbers:!0},"ALTER TABLE `player_vehicles`\nADD `evidence` longtext;\n")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Running our SQL",src:n(1195).Z,width:"2339",height:"1709"})),(0,i.kt)("h2",{id:"verifying-our-change"},"Verifying Our Change"),(0,i.kt)("p",null,"Once we run this SQL statement, we should recieve a notification that it has either successfully completed or that there was an error. If you\nexperience an error please check to make sure the name of the table in the SQL statement matches your table in your database, and that no column\nalready exists named ",(0,i.kt)("inlineCode",{parentName:"p"},"evidence"),". Once we successfully run this statement however, we should verify that our database has updated and if needed\nalter our config in our r14-evidence resource."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Verifying our change to the database",src:n(440).Z,width:"3382",height:"1571"})),(0,i.kt)("p",null,"Now that we have completed the update to our database, it is time to complete the installation checklist before restarting our server!"),(0,i.kt)("h2",{id:"player-identifiers-esx-or-standalone-frameworks-only"},"Player Identifiers (ESX or Standalone Frameworks ONLY)"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This is not a required step if you are running qb-core, a modified version of ESX, or a Standalone Framework with fingerprints,\nblood types, and citizenid's accessible via the framework object.")),(0,i.kt)("p",null,"If you are running ESX or a Standalone framework and do not have fingerprints, blood type, or a citizen ID number easily accessible via your\nPlayerData or equivalent functions, you will need to create an evidence identifiers table that will hold these character-specific identifiers\nin the database so that r14-evidence may reference them when needed. Fear not, r14-evidence does not call to database everytime these need to be\nused, and instead simply references the database the first time a player character interacts with the server-side script."),(0,i.kt)("p",null,"We will want to follow the same process we did before, but this time we want to create an entirely new table within our database using the\nfollowing SQL statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql",metastring:"title'SQL Statement To Be Run' showLineNumbers","title'SQL":!0,Statement:!0,To:!0,Be:!0,"Run'":!0,showLineNumbers:!0},"CREATE TABLE IF NOT EXISTS `ev_identifiers` (\n  `identifier` varchar(255) NOT NULL,\n  `citizenid` varchar(50) NOT NULL,\n  `bloodtype` varchar(50) NOT NULL,\n  `fingerprint` varchar(50) NOT NULL,    \n   PRIMARY KEY (`identifier`)\n) ENGINE=InnoDB;\n")),(0,i.kt)("h2",{id:"verifying-our-change-1"},"Verifying Our Change"),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Like our entire database, it is a good idea to rouinely backup your data, if a player entry is deleted or the table is lost r14-evidence will randomly generate\nENTIRELY new identifiers which means active investigations will run into issues linking evidence!")),(0,i.kt)("p",null,"As before, we want to run this SQL statement and then verify that our database has successfully created our evidence identifiers table. In this\ncase we are using the default name included in the config, ",(0,i.kt)("inlineCode",{parentName:"p"},"ev_identifiers")," and have created some evidence with various characters. We can see that\nthe table exists in our database, the columns match those created by the SQL, and when we create evidence with a new character they successfully have\nnew identifiers created for them! From now on, r14-evidence will load these identifiers the first time that character interacts with the script, and will\nmaintain the same identifiers across server reset. "),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Running our SQL",src:n(3803).Z,width:"1889",height:"1011"})))}h.isMDXComponent=!0},5300:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/clickrunsql-85295d5f14195c3b940080f0158d800a.png"},3803:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/identifierstable-02b2ae8098bfc0f2a5e70e5795402674.png"},1195:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/runsql-3994183272c24e7b59734308cfe3f973.png"},440:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/verifysql-7e609502b47433abea4e29b14db8ce11.png"}}]);